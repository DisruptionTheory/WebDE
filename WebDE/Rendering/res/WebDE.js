/*Generated by SharpKit 5 v4.27.4000*/
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}
if(typeof(JsTypes) == "undefined")
    JsTypes = [];
var WebDE$Rendering$DOM_Renderer=
{
    fullname:"WebDE.Rendering.DOM_Renderer",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    interfaceNames:["WebDE.Rendering.IRengerEngine"],
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.document = null;
            this.initiallyRendered = false;
            this.elementsByGameObjectId = new System.Collections.Generic.Dictionary$2.ctor(System.String,"ELEMENT");
            this.elementsByGuiId = new System.Collections.Generic.Dictionary$2.ctor(System.String,"ELEMENT");
            System.Object.ctor.call(this);
            this.document = WebDE.DefaultClient.GetDocument();
        },
        InitialRender:function()
        {
            var parentElement=this.document.createElement("div");
            parentElement.id = "gameWrapper";
            var gameBoard=this.document.createElement("div");
            gameBoard.id = "gameBoard";
            this.document.body.appendChild(parentElement);
            parentElement.appendChild(gameBoard);
            this.RebuildAnimationFrames();
            this.Resize();
            this.initiallyRendered = true;
            this.Render();
        },
        Render:function()
        {
            if(this.initiallyRendered == false)
            {
                this.InitialRender();
            }
            var $it47=WebDE.Rendering.View.GetActiveViews().GetEnumerator();
            while($it47.MoveNext())
            {
                var view=$it47.get_Current();
                var $it48=view.GetVisibleEntities().GetEnumerator();
                while($it48.MoveNext())
                {
                    var gent=$it48.get_Current();
                    this.RenderGameEntity(gent);
                }
            }
        },
        RenderGameEntity:function(gent)
        {
            var gentlement=this.elementsByGameObjectId.get_Item$$TKey(gent.GetId());
            if(gentlement == null)
            {
                gentlement = this.document.createElement("div");
                this.AddClass(gentlement,"Entity");
                this.document.getElementById("gameBoard").appendChild(gentlement);
                if(Is(gent,WebDE.Objects.Tile))
                {
                    this.AddClass(gentlement,"Tile");
                }
                this.elementsByGameObjectId.set_Item$$TKey(gent.GetId(),gentlement);
            }
            gentlement.style.left = (gent.GetPosition().x * WebDE.Objects.Stage.CurrentStage.GetTileSize().get_Item1()) + "px";
            gentlement.style.top = (gent.GetPosition().y * WebDE.Objects.Stage.CurrentStage.GetTileSize().get_Item2()) + "px";
            if(gent.GetSprite() == null)
            {
                return;
            }
            var frameId=gent.GetSprite().Animate();
            if(frameId != gent.GetSprite().GetCurrentRenderFrame())
            {
                this.RemoveClass(gentlement,gent.GetSprite().GetCurrentRenderFrame());
                this.AddClass(gentlement,frameId);
                gent.GetSprite().SetCurrentRenderFrame(frameId);
            }
        },
        DestroyGameEntity:function(gent)
        {
            var gentlement=this.elementsByGameObjectId.get_Item$$TKey(gent.GetId());
            if(gentlement != null)
            {
                this.document.body.removeChild(gentlement);
                this.elementsByGameObjectId.Remove(gent.GetId());
            }
        },
        RenderGUIElement:function(gelm)
        {
            var gentlement=this.elementsByGuiId.get_Item$$TKey(gelm.GetId());
            if(gentlement == null)
            {
                gentlement = this.document.createElement("div");
                this.AddClass(gentlement,"GUIElement");
                this.document.getElementById("gameBoard").appendChild(gentlement);
                this.elementsByGuiId.set_Item$$TKey(gelm.GetId(),gentlement);
            }
            gentlement.style.left = (gelm.GetPosition().x * WebDE.Objects.Stage.CurrentStage.GetTileSize().get_Item1()) + "px";
            gentlement.style.top = (gelm.GetPosition().y * WebDE.Objects.Stage.CurrentStage.GetTileSize().get_Item2()) + "px";
            if(gelm.GetSprite() == null)
            {
                return;
            }
            var frameId=gelm.GetSprite().Animate();
            if(frameId != gelm.GetSprite().GetCurrentRenderFrame())
            {
                this.RemoveClass(gentlement,gelm.GetSprite().GetCurrentRenderFrame());
                this.AddClass(gentlement,frameId);
                gelm.GetSprite().SetCurrentRenderFrame(frameId);
            }
        },
        AddClass:function(elem,classToAdd)
        {
            throw new System.NotImplementedException.ctor();
        },
        RemoveClass:function(elem,classToRem)
        {
            throw new System.NotImplementedException.ctor();
        },
        Resize:function()
        {
        },
        RebuildAnimationFrames:function()
        {
            if(this.document.getElementById("animFrameClasses") != null)
            {
                this.document.body.removeChild(this.document.getElementById("animFrameClasses"));
            }
            var animFrmCssContents="";
            var $it49=WebDE.Animation.AnimationFrame.GetAnimationFrames().GetEnumerator();
            while($it49.MoveNext())
            {
                var animFrame=$it49.get_Current();
                var framePos=animFrame.getPosition();
                animFrmCssContents += "." + animFrame.getId() + " { " + "background-image: url(\'" + animFrame.getImage() + "\'); " + "background-position-x: " + framePos.get_Item1() + "px; " + "background-position-y: " + framePos.get_Item2() + "px; " + " }";
            }
            var framesStyle=this.document.createElement("style");
            framesStyle.innerHTML = animFrmCssContents;
            this.document.body.appendChild(framesStyle);
        }
    }
};
JsTypes.push(WebDE$Rendering$DOM_Renderer);
var WebDE$Rendering$RenderElement=
{
    fullname:"WebDE.Rendering.RenderElement",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Rendering.RenderElement.document = null;
        },
        Initialize:function(doc)
        {
            WebDE.Rendering.RenderElement.document = doc;
        },
        GetDocument:function()
        {
            return WebDE.Rendering.RenderElement.document;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(sprite,position)
        {
            this.GameEntityDiv = null;
            this.position = null;
            this.sprite = null;
            System.Object.ctor.call(this);
            this.sprite = sprite;
            this.position = position;
        },
        GetPosition:function()
        {
            return this.position;
        },
        SetPosition:function(newPos)
        {
            this.position = newPos;
            this.setCSSPosition(this.position.x,this.position.y);
        },
        GetSprite:function()
        {
            return this.sprite;
        },
        SetSprite:function(newSprite)
        {
            this.sprite = newSprite;
        },
        Destroy:function()
        {
            if(this.GetRenderElement() == null)
            {
                return;
            }
            WebDE.Rendering.RenderElement.document.getElementById("gameBoard").removeChild(this.GetRenderElement());
        },
        InitialRender:function()
        {
            this.GameEntityDiv = WebDE.Rendering.RenderElement.document.createElement("div");
            WebDE.Rendering.RenderElement.document.getElementById("gameBoard").appendChild(this.GameEntityDiv);
            this.GameEntityDiv.className = "GameEntity";
            if(this.GetSprite() != null)
            {
                var spriteSize=this.GetSprite().getSize();
                this.GameEntityDiv.style.width = spriteSize.get_Item1() + "px";
                this.GameEntityDiv.style.height = spriteSize.get_Item2() + "px";
            }
            return this.GameEntityDiv;
        },
        GetRenderElement:function()
        {
            return this.GameEntityDiv;
        },
        Render:function()
        {
            if(this.GameEntityDiv == null)
            {
                this.InitialRender();
            }
            this.setCSSPosition(this.position.x * WebDE.Objects.Stage.CurrentStage.GetTileSize().get_Item1(),this.position.y * WebDE.Objects.Stage.CurrentStage.GetTileSize().get_Item2());
            if(this.GetSprite() == null)
            {
                return;
            }
            var frameId=this.GetSprite().Animate();
            if(frameId != this.GetSprite().GetCurrentRenderFrame())
            {
                this.RemoveClass(this.GetSprite().GetCurrentRenderFrame());
                this.AddClass(frameId);
                this.GetSprite().SetCurrentRenderFrame(frameId);
            }
            else
            {
            }
        },
        AddClass:function(className)
        {
            var thisClass=this.GameEntityDiv.className;
            if(!thisClass.Contains(className))
            {
                thisClass += " " + className;
            }
            this.GameEntityDiv.className = thisClass;
        },
        RemoveClass:function(className)
        {
            var thisClass=this.GameEntityDiv.className;
            if(thisClass.Contains(className))
            {
                var cni=thisClass.indexOf(className);
                if(cni > 0)
                {
                    thisClass = thisClass.Remove$$Int32$$Int32(cni - 1,className.length);
                }
                else
                {
                    thisClass = thisClass.Remove$$Int32$$Int32(cni,className.length);
                }
            }
            this.GameEntityDiv.className = thisClass;
        },
        setCSSPosition:function(left,top)
        {
            this.GameEntityDiv.style.left = left + "px";
            this.GameEntityDiv.style.top = top + "px";
        }
    }
};
JsTypes.push(WebDE$Rendering$RenderElement);
var WebDE$Rendering$Surface=
{
    fullname:"WebDE.Rendering.Surface",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Rendering.Surface.renderer = null;
        },
        Initialize:function(renderer)
        {
            WebDE.Rendering.Surface.renderer = renderer;
            WebDE.Timekeeper.Clock.AddRender($CreateDelegate(WebDE.Rendering.Surface.renderer,WebDE.Rendering.Surface.renderer.Render));
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WebDE$Rendering$Surface);
var WebDE$Rendering$View=
{
    fullname:"WebDE.Rendering.View",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Rendering.View.activeViews = new System.Collections.Generic.List$1.ctor(WebDE.Rendering.View);
            WebDE.Rendering.View.mainView = null;
        },
        GetActiveViews:function()
        {
            return WebDE.Rendering.View.activeViews;
        },
        SetMainView:function(newView)
        {
            WebDE.Rendering.View.mainView = newView;
        },
        GetMainView:function()
        {
            return WebDE.Rendering.View.mainView;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(lightStyle)
        {
            this.stgAttached = null;
            this.width = 800;
            this.height = 600;
            this.x = 0;
            this.y = 0;
            this.active = false;
            this.LightStyle = 0;
            System.Object.ctor.call(this);
            this.LightStyle = lightStyle;
            this.Activate();
            if(WebDE.Rendering.View.mainView == null)
            {
                WebDE.Rendering.View.mainView = this;
            }
        },
        IsActive:function()
        {
            return this.active;
        },
        Activate:function()
        {
            this.active = true;
            if(WebDE.Rendering.View.activeViews.Contains(this) == false)
            {
                WebDE.Rendering.View.activeViews.Add(this);
            }
        },
        Deactivate:function()
        {
            this.active = false;
            if(WebDE.Rendering.View.activeViews.Contains(this) == true)
            {
                WebDE.Rendering.View.activeViews.Remove(this);
            }
        },
        AttachStage:function(newStage)
        {
            this.stgAttached = newStage;
        },
        GetAttachedStage:function()
        {
            return this.stgAttached;
        },
        GetViewArea:function()
        {
            return new WebDE.Rectangle.ctor(this.x,this.y,this.width,this.height);
        },
        GetSize:function()
        {
            return new System.Tuple$2.ctor(System.Int32,System.Int32,this.width,this.height);
        },
        SetSize:function(newWidth,newHeight)
        {
            this.width = newWidth;
            this.height = newHeight;
        },
        SetPosition:function(newX,newY)
        {
            this.x = newX;
            this.y = newY;
        },
        GetArea:function()
        {
            var returnVal=new WebDE.Rectangle.ctor(this.x,this.y,this.width,this.height);
            return returnVal;
        },
        resize:function()
        {
        },
        RenderLightSources:function()
        {
            var $it50=this.stgAttached.GetLights().GetEnumerator();
            while($it50.MoveNext())
            {
                var light=$it50.get_Current();
            }
        },
        GetVisibleEntities:function()
        {
            var returnList=new System.Collections.Generic.List$1.ctor(WebDE.Objects.GameEntity);
            if(this.stgAttached != null)
            {
                returnList.AddRange(this.stgAttached.GetVisibleEntities(this));
                returnList.AddRange(this.stgAttached.GetVisibleTiles(this));
            }
            return returnList;
        },
        SetLightingStyle:function(newStyle)
        {
            this.LightStyle = newStyle;
        },
        GetLightingStyle:function()
        {
            return this.LightStyle;
        }
    }
};
JsTypes.push(WebDE$Rendering$View);
