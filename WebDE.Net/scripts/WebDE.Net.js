/*Generated by SharpKit 5 v4.28.1000*/
function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};
function $CreateMulticastDelegateFunction()
{
    var del=function()
    {
        var del2=arguments.callee;
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    return del;
};
function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}
if(typeof(JsTypes) == "undefined")
    JsTypes = [];
var WebDE$Net$GameClient=
{
    fullname:"WebDE.Net.GameClient",
    baseTypeName:"System.Object",
    assemblyName:"WebDE.Net",
    Kind:"Class",
    definition:
    {
        ctor:function(host,port)
        {
            this.socket = null;
            System.Object.ctor.call(this);
            this.set_Port(port);
            this.set_Host(host);
        },
        Port$$:"System.Int32",
        get_Port:function(){return this._Port;},
        set_Port:function(value){this._Port = value;},
        Host$$:"System.String",
        get_Host:function(){return this._Host;},
        set_Host:function(value){this._Host = value;},
        add_OnReceive:function(value)
        {
            this.OnReceive = $CombineDelegates(this.OnReceive,value);
        },
        remove_OnReceive:function(value)
        {
            this.OnReceive = $RemoveDelegate(this.OnReceive,value);
        },
        add_OnConnect:function(value)
        {
            this.OnConnect = $CombineDelegates(this.OnConnect,value);
        },
        remove_OnConnect:function(value)
        {
            this.OnConnect = $RemoveDelegate(this.OnConnect,value);
        },
        add_OnDisconnect:function(value)
        {
            this.OnDisconnect = $CombineDelegates(this.OnDisconnect,value);
        },
        remove_OnDisconnect:function(value)
        {
            this.OnDisconnect = $RemoveDelegate(this.OnDisconnect,value);
        },
        Connect:function()
        {
            this.socket = new WebSocket("ws://" + this.get_Host() + ":" + this.get_Port());
            this.socket.onopen = $CreateDelegate(this,this.onOpen);
            this.socket.onclose = $CreateDelegate(this,this.onClose);
            this.socket.onmessage = $CreateDelegate(this,this.onMessage);
        },
        onOpen:function()
        {
            this.OnConnect();
        },
        onClose:function(evt)
        {
            this.OnDisconnect();
        },
        onMessage:function(evt)
        {
            this.OnReceive(evt.data.toString());
        },
        onError:function(evt)
        {
        }
    }
};
JsTypes.push(WebDE$Net$GameClient);
