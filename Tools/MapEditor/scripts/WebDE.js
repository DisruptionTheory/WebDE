/*Generated by SharpKit 5 v4.28.9000*/
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};
function $CreateMulticastDelegateFunction()
{
    var del=function()
    {
        var del2=arguments.callee;
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    return del;
};
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$Debug=
{
    fullname:"WebDE.Debug",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Debug.debugLog = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            WebDE.Debug.manualClockRenders = new System.Collections.Generic.List$1.ctor(System.Action.ctor);
            WebDE.Debug.manualClockCalculations = new System.Collections.Generic.List$1.ctor(System.Action.ctor);
            WebDE.Debug.manualClockCreated = false;
            WebDE.Debug.DebugLayer = null;
            WebDE.Debug.Watches = new System.Collections.Generic.List$1.ctor(WebDE.Debug.ctor);
        },
        Message:function(message,msgName)
        {
            if(msgName == "" || msgName == null)
            {
            }
            else
            {
            }
        },
        log:function(message)
        {
            WebDE.Debug.debugLog.Add(message);
            message = message.Replace$$String$$String("\'","");
            console.log(message);
        },
        DebugClock:function(buttonTrigger)
        {
            if(WebDE.Debug.manualClockCreated == false)
            {
                WebDE.Debug.CreateManualClock();
            }
            var $it7=WebDE.Debug.manualClockRenders.GetEnumerator();
            while($it7.MoveNext())
            {
                var act=$it7.get_Current();
                act();
            }
            var $it8=WebDE.Debug.manualClockCalculations.GetEnumerator();
            while($it8.MoveNext())
            {
                var act=$it8.get_Current();
                act();
            }
        },
        AddCalculation:function(calculationToAdd)
        {
            WebDE.Debug.manualClockCalculations.Add(calculationToAdd);
        },
        AddRender:function(renderToAdd)
        {
            WebDE.Debug.manualClockRenders.Add(renderToAdd);
        },
        CreateManualClock:function()
        {
            var debugClock=new WebDE.GUI.GUIFunction.ctor$$String$$InputDevice$$String("DebugClock",WebDE.InputManager.InputDevice.Keyboard,"Plus");
            WebDE.InputManager.InputDevice.Keyboard.Bind$$String$$Int32$$GUIFunction("NumPlus",107,debugClock);
            WebDE.Debug.Render();
            WebDE.Debug.DebugLayer.SetGUIFunction(debugClock,WebDE.Debug.DebugClock);
            WebDE.Debug.manualClockCreated = true;
        },
        GetDebugLayer:function()
        {
            if(WebDE.Debug.DebugLayer == null)
            {
                WebDE.Debug.DebugLayer = WebDE.Rendering.View.GetMainView().AddLayer("DebugLayer",new WebDE.Rectangle.ctor(0,-40,800,40));
            }
            return WebDE.Debug.DebugLayer;
        },
        Watch:function(label,value)
        {
            if(WebDE.Debug.DebugLayer == null)
            {
                WebDE.Debug.Render();
            }
            var returnDebug=new WebDE.Debug.ctor();
            var exists=false;
            var $it9=WebDE.Debug.Watches.GetEnumerator();
            while($it9.MoveNext())
            {
                var watch=$it9.get_Current();
                if(watch.label == label)
                {
                    returnDebug = watch;
                    exists = true;
                }
            }
            returnDebug.label = label;
            returnDebug.value = value;
            if(exists == false)
            {
                returnDebug.debugElement = WebDE.Debug.GetDebugLayer().AddGUIElement("Debug element.");
                returnDebug.debugElement.SetPosition(0,WebDE.Debug.DebugLayer.GetGuiElements().get_Count() * 20);
                WebDE.Debug.Watches.Add(returnDebug);
            }
            WebDE.Debug.Render();
            return returnDebug;
        },
        Render:function()
        {
            var $it10=WebDE.Debug.Watches.GetEnumerator();
            while($it10.MoveNext())
            {
                var watch=$it10.get_Current();
                watch.debugElement.SetText(watch.label + " : " + watch.value);
            }
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.debugElement = null;
            this.label = null;
            this.value = null;
            System.Object.ctor.call(this);
        },
        UpdateValue:function(newValue)
        {
            this.value = newValue;
            WebDE.Debug.Render();
        }
    }
};
JsTypes.push(WebDE$Debug);
var WebDE$Game=
{
    fullname:"WebDE.Game",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Game.gameStages = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.Stage.ctor);
            WebDE.Game.renderer = null;
            WebDE.Game.environment = "HTML";
            WebDE.Game.globalEntities = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            WebDE.Game.hashedGlobalEntities = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor,WebDE.GameObjects.GameEntity.ctor);
            WebDE.Game.notificationLayer = null;
        },
        Init:function()
        {
            WebDE.InputManager.Input.Init();
            WebDE.Rendering.Surface.Initialize(new WebDE.Rendering.DOM_Renderer.ctor());
            var playerOneView=new WebDE.Rendering.View.ctor(0);
            playerOneView.SetArea(new WebDE.Rectangle.ctor(0,0,WebDE.Game.GetRenderer().GetSize().width,WebDE.Game.GetRenderer().GetSize().height));
            WebDE.Game.notificationLayer = playerOneView.AddLayer("NotificationLayer",new WebDE.Rectangle.ctor(0,0,0,0));
            WebDE.Game.notificationLayer.SetSize(522,60);
            var notifIcon=WebDE.Game.notificationLayer.AddGUIElement("");
            notifIcon.SetPosition(2,0);
            var notifSender=WebDE.Game.notificationLayer.AddGUIElement("");
            notifSender.SetPosition(-2,0);
            notifSender.SetSize(474,12);
            var notifText=WebDE.Game.notificationLayer.AddGUIElement("");
            notifText.SetPosition(-2,18);
            notifText.SetSize(474,40);
            var notif_repos=WebDE.Timekeeper.Clock.AddRender(WebDE.Game.reposition_notification_layeer);
            WebDE.Timekeeper.Clock.delayRender(notif_repos,2);
            WebDE.Timekeeper.Clock.AddCalculation(WebDE.Game.StandardCalculations);
            WebDE.Timekeeper.Clock.IntervalExecute(WebDE.Game.StandardIntervalCalculations,0.2);
        },
        StandardCalculations:function()
        {
            if(WebDE.GameObjects.Stage.CurrentStage != null)
            {
                WebDE.GameObjects.Stage.CurrentStage.CalculateEntities();
                if(WebDE.GameObjects.Stage.CurrentStage.GetLights().get_Count() > 0)
                {
                    WebDE.GameObjects.Stage.CurrentStage.CalculateLights();
                }
            }
        },
        StandardIntervalCalculations:function()
        {
            if(WebDE.GameObjects.Stage.CurrentStage != null)
            {
                WebDE.GameObjects.Stage.CurrentStage.CalculateGameEntityPhysics();
            }
        },
        reposition_notification_layeer:function()
        {
            var viewArea=WebDE.Rendering.View.GetMainView().GetViewArea();
            var newNotifX=viewArea.x + viewArea.width - WebDE.Game.notificationLayer.GetSize().width - 12;
            var newNotifY=viewArea.x + viewArea.height - WebDE.Game.notificationLayer.GetSize().height - 12;
            WebDE.Game.notificationLayer.SetPosition(newNotifX,newNotifY);
        },
        Notification:function(icon,sender,message,duration)
        {
            var notifIcon=WebDE.Game.notificationLayer.GetGuiElements().get_Item$$Int32(0);
            var notifSender=WebDE.Game.notificationLayer.GetGuiElements().get_Item$$Int32(1);
            var notifText=WebDE.Game.notificationLayer.GetGuiElements().get_Item$$Int32(2);
            notifIcon.SetSprite(icon);
            notifIcon.GetSprite().setSize(40,40);
            notifIcon.GetSprite().Animate();
            notifSender.SetText(sender);
            notifText.SetText(message);
        },
        CreateStage:function(stageName,stageType)
        {
            var newStage=new WebDE.GameObjects.Stage.ctor(stageName,stageType);
            if(WebDE.Rendering.View.GetMainView() != null && WebDE.Rendering.View.GetMainView().GetAttachedStage() == null)
            {
                WebDE.Rendering.View.GetMainView().AttachStage(newStage);
            }
            WebDE.Game.gameStages.Add(newStage);
            return newStage;
        },
        LoadStage:function(stageToLoad)
        {
        },
        SetAttribute:function(attributeValue)
        {
            if(attributeValue.toLowerCase() == "html")
            {
                WebDE.Game.environment = "HTML";
            }
        },
        GetEnvironment:function()
        {
            return WebDE.Game.environment;
        },
        GetGlobalGameEntity:function(GameEntityidentifier)
        {
            return null;
        },
        GetRenderer:function()
        {
            return WebDE.Game.renderer;
        },
        SetRenderer:function(newRenderer)
        {
            WebDE.Game.renderer = newRenderer;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WebDE$Game);
var WebDE$Main=
{
    fullname:"WebDE.Main",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Main.mainBase = null;
        },
        Initialize:function()
        {
            new WebDE.Main.ctor();
            WebDE.Game.Init();
            WebDE.Timekeeper.Clock.Start();
        },
        GetDocument:function()
        {
            return document;
        },
        GetWindow:function()
        {
            return window;
        },
        GetContext:function()
        {
            return WebDE.Main.mainBase;
        },
        consolelog:function(message)
        {
            console.log(message);
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
            WebDE.Main.mainBase = this;
        }
    }
};
JsTypes.push(WebDE$Main);
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$AI$ArtificialIntelligence=
{
    fullname:"WebDE.AI.ArtificialIntelligence",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.body = null;
            this.currentPath = null;
            this.currentNode = 0;
            this.oldSpeed = null;
            this.aiDebug = null;
            this.alternateMovementProcess = null;
            System.Object.ctor.call(this);
        },
        GetMovementPath:function()
        {
            return this.currentPath;
        },
        SetMovementPath:function(newPath)
        {
            this.currentPath = newPath;
        },
        GetBody:function()
        {
            return this.body;
        },
        SetBody:function(newBody)
        {
            this.body = newBody;
        },
        Think:function()
        {
            this.ThinkAboutDoingViolence();
            this.ThinkAboutWhereToGo();
        },
        ThinkAboutWhereToGo:function()
        {
            if(this.alternateMovementProcess != null)
            {
                this.alternateMovementProcess(this);
                return;
            }
            this.body.SetDirection(0);
            if(this.oldSpeed != null)
            {
                this.body.SetSpeed(this.oldSpeed);
                this.oldSpeed = null;
            }
            if(this.currentPath != null)
            {
                if(this.currentPath.GetNodeCount() == 0)
                {
                    WebDE.Debug.log("A non null path has 0 nodes for entity " + this.GetBody().GetId() + " (" + this.GetBody().GetName() + ")");
                }
                var curNode=this.currentPath.GetNode(this.currentNode);
                if(curNode == null)
                {
                    this.currentPath = null;
                    this.body.SetSpeed(new WebDE.Vector.ctor(0,0));
                }
                else
                {
                    var hOffset=this.body.GetPosition().x - curNode.x;
                    var vOffset=this.body.GetPosition().y - curNode.y;
                    WebDE.Debug.Watch("Current Position",WebDE.GameObjects.Helpah.Round$$Double$$Int32(this.body.GetPosition().x,2) + "," + WebDE.GameObjects.Helpah.Round$$Double$$Int32(this.body.GetPosition().y,2));
                    WebDE.Debug.Watch("Desired Position",WebDE.GameObjects.Helpah.Round$$Double$$Int32(curNode.x,2) + "," + WebDE.GameObjects.Helpah.Round$$Double$$Int32(curNode.y,2));
                    WebDE.Debug.Watch("hOffset",WebDE.GameObjects.Helpah.Round$$Double$$Int32(hOffset,2).toString());
                    WebDE.Debug.Watch("vOffset",WebDE.GameObjects.Helpah.Round$$Double$$Int32(vOffset,2).toString());
                    WebDE.Debug.Watch("xSpeed",WebDE.GameObjects.Helpah.Round$$Double$$Int32(this.body.GetSpeed().x,2).toString());
                    WebDE.Debug.Watch("ySpeed",WebDE.GameObjects.Helpah.Round$$Double$$Int32(this.body.GetSpeed().y,2).toString());
                    hOffset = WebDE.GameObjects.Helpah.Round$$Double(hOffset);
                    vOffset = WebDE.GameObjects.Helpah.Round$$Double(vOffset);
                    if(System.Math.Abs$$Double(hOffset) > System.Math.Abs$$Double(vOffset))
                    {
                        if(hOffset > 0)
                        {
                            this.body.SetDirection(-1);
                        }
                        else
                        {
                            this.body.SetDirection(1);
                        }
                    }
                    else
                    {
                        if(vOffset > 0)
                        {
                            this.body.SetDirection(-2);
                        }
                        else
                        {
                            this.body.SetDirection(2);
                        }
                    }
                    if(hOffset != 0 && System.Math.Abs$$Double(hOffset) <= this.body.GetSpeed().x / this.body.GetAcceleration())
                    {
                        this.body.SetDirection(0);
                        if(System.Math.Abs$$Double(hOffset) < this.body.GetAcceleration())
                        {
                            this.body.SetSpeed(new WebDE.Vector.ctor(hOffset,this.body.GetSpeed().y));
                        }
                    }
                    if(vOffset != 0 && System.Math.Abs$$Double(vOffset) <= this.body.GetSpeed().y / this.body.GetAcceleration())
                    {
                        this.body.SetDirection(0);
                        if(System.Math.Abs$$Double(vOffset) < this.body.GetAcceleration())
                        {
                            this.body.SetSpeed(new WebDE.Vector.ctor(this.body.GetSpeed().x,vOffset));
                        }
                    }
                    if(WebDE.GameObjects.Helpah.Round$$Double(hOffset) == 0 && WebDE.GameObjects.Helpah.Round$$Double(vOffset) == 0)
                    {
                        this.body.SetDirection(0);
                        this.currentNode++;
                    }
                    WebDE.Debug.Watch("Desired direction:",this.body.GetDirection().toString());
                }
            }
        },
        ThinkAboutDoingViolence:function()
        {
            try
            {
                var listoguns=this.GetBody().GetWeapons();
                var i=0;
                while(listoguns.get_Count() > i)
                {
                    var theWeapon=listoguns.get_Item$$Int32(i);
                    if(theWeapon.GetTarget() != null && this.body.GetPosition().Distance(theWeapon.GetTarget().GetPosition()) < theWeapon.GetRange())
                    {
                        theWeapon.Fire();
                    }
                    else
                    {
                        var $it1=WebDE.GameObjects.Stage.CurrentStage.GetVisibleEntities(WebDE.Rendering.View.GetMainView()).GetEnumerator();
                        while($it1.MoveNext())
                        {
                            var ent=$it1.get_Current();
                            if(ent.GetPosition().Distance(this.body.GetPosition()) < theWeapon.GetRange())
                            {
                                theWeapon.SetTarget(ent);
                                theWeapon.Fire();
                                break;
                            }
                        }
                    }
                    i++;
                }
            }
            catch(ex)
            {
            }
        },
        SetMovementThoughtPattern:function(newThoughtProcess)
        {
            this.alternateMovementProcess = newThoughtProcess;
        },
        updateDebug:function(newMsg)
        {
            if(this.aiDebug == null)
            {
                this.aiDebug = WebDE.Debug.Watch("hOffset","World");
            }
            this.aiDebug.UpdateValue(newMsg);
        }
    }
};
JsTypes.push(WebDE$AI$ArtificialIntelligence);
var WebDE$AI$MovementPath=
{
    fullname:"WebDE.AI.MovementPath",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        ResolvePath:function(start,end)
        {
            var newPath=new WebDE.AI.MovementPath.ctor(null);
            newPath.AddPoint(start);
            if(start.x != end.x)
            {
                var newPoint=new WebDE.Point.ctor(end.x,start.y);
                newPath.AddPoint(newPoint);
            }
            if(start.y != end.y)
            {
                newPath.AddPoint(end);
            }
            return newPath;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(movementNodes_nullable)
        {
            this.nodes = new System.Collections.Generic.List$1.ctor(WebDE.Point.ctor);
            this.looping = false;
            System.Object.ctor.call(this);
            if(movementNodes_nullable != null)
            {
                this.nodes = movementNodes_nullable;
            }
        },
        GetNode:function(nodeIndex)
        {
            if(nodeIndex > this.nodes.get_Count() - 1 || nodeIndex < 0)
            {
                return null;
            }
            return this.nodes.get_Item$$Int32(nodeIndex);
        },
        GetNextNode:function(nodeIndex)
        {
            return this.nodes.get_Item$$Int32(nodeIndex + 1);
        },
        AddPoint:function(pointToAdd)
        {
            this.nodes.Add(pointToAdd);
        },
        GetNodeCount:function()
        {
            return this.nodes.get_Count();
        },
        GetLooping:function()
        {
            return this.looping;
        },
        SetLooping:function(doesLoop)
        {
            this.looping = doesLoop;
        }
    }
};
JsTypes.push(WebDE$AI$MovementPath);
var WebDE$AI$Objective=
{
    fullname:"WebDE.AI.Objective",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.target = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WebDE$AI$Objective);
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$Rendering$DOM_Renderer=
{
    fullname:"WebDE.Rendering.DOM_Renderer",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Rendering.DOM_Renderer.gameRenderer = null;
        },
        GetRenderer:function()
        {
            return WebDE.Rendering.DOM_Renderer.gameRenderer;
        }
    },
    assemblyName:"WebDE",
    interfaceNames:["WebDE.Rendering.IRenderEngine"],
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.document = null;
            this.window = null;
            this.initiallyRendered = false;
            this.elementsByGameObjectId = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor,"ELEMENT");
            this.elementsByGuiId = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor,"ELEMENT");
            this.gameEntitiesToUpdate = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.guiElementsToUpdate = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.x = 0;
            this.y = 0;
            System.Object.ctor.call(this);
            WebDE.Rendering.DOM_Renderer.gameRenderer = this;
            this.document = WebDE.Main.GetDocument();
            this.window = WebDE.Main.GetWindow();
            WebDE.Game.SetRenderer(this);
        },
        InitialRender:function()
        {
            var parentElement=this.document.createElement("div");
            parentElement.id = "gameWrapper";
            var gameBoard=this.document.createElement("div");
            gameBoard.id = "gameBoard";
            this.document.body.appendChild(parentElement);
            parentElement.appendChild(gameBoard);
            var windowArea=new WebDE.Rectangle.ctor(0,0,this.window.innerWidth,this.window.innerHeight);
            parentElement.style.width = Math.round(windowArea.width * 0.98) + "px";
            parentElement.style.height = Math.round(windowArea.height * 0.98) + "px";
            this.RebuildAnimationFrames();
            var $it51=WebDE.Rendering.View.GetActiveViews().GetEnumerator();
            while($it51.MoveNext())
            {
                var view=$it51.get_Current();
                var $it52=view.GetLayers().GetEnumerator();
                while($it52.MoveNext())
                {
                    var layer=$it52.get_Current();
                    this.RenderGUILayer(layer);
                    var $it53=layer.GetGuiElements().GetEnumerator();
                    while($it53.MoveNext())
                    {
                        var gelm=$it53.get_Current();
                        this.RenderGUIElement(gelm);
                    }
                }
            }
            this.Resize();
            this.initiallyRendered = true;
            this.Render();
        },
        Render:function()
        {
            if(this.initiallyRendered == false)
            {
                this.InitialRender();
            }
            var $it54=WebDE.Rendering.View.GetActiveViews().GetEnumerator();
            while($it54.MoveNext())
            {
                var view=$it54.get_Current();
                var $it55=view.GetVisibleEntities().GetEnumerator();
                while($it55.MoveNext())
                {
                    var gent=$it55.get_Current();
                    this.RenderGameEntity(gent);
                }
                WebDE.Debug.Watch("Rendering light sources: ",WebDE.GameObjects.Stage.CurrentStage.GetLights().get_Count().toString());
                var $it56=WebDE.GameObjects.Stage.CurrentStage.GetLights().GetEnumerator();
                while($it56.MoveNext())
                {
                    var light=$it56.get_Current();
                    this.RenderLightSource(light);
                }
                var $it57=view.GetLayers().GetEnumerator();
                while($it57.MoveNext())
                {
                    var layer=$it57.get_Current();
                    if(this.elementsByGuiId.get_Item$$TKey(layer.GetId()) == null || this.guiElementsToUpdate.Contains(layer.GetId()) || layer.FollowingCursor() == true)
                    {
                        this.RenderGUILayer(layer);
                    }
                    var $it58=layer.GetGuiElements().GetEnumerator();
                    while($it58.MoveNext())
                    {
                        var gelm=$it58.get_Current();
                        this.RenderGUIElement(gelm);
                    }
                }
            }
        },
        RenderGameEntity:function(gent)
        {
            var gentlement=this.elementsByGameObjectId.get_Item$$TKey(gent.GetId());
            if(gentlement == null)
            {
                gentlement = this.document.createElement("div");
                this.AddClass(gentlement,"Entity");
                this.AddClass(gentlement,gent.GetType().get_Name());
                this.document.getElementById("gameBoard").appendChild(gentlement);
                var $it59=gent.GetCustomStyles().GetEnumerator();
                while($it59.MoveNext())
                {
                    var style=$it59.get_Current();
                    this.AddClass(gentlement,style);
                }
                this.elementsByGameObjectId.set_Item$$TKey(gent.GetId(),gentlement);
            }
            if(this.gameEntitiesToUpdate.Contains(gent.GetId()))
            {
                gentlement.style.left = (gent.GetPosition().x * WebDE.GameObjects.Stage.CurrentStage.GetTileSize().get_Item1()) + "px";
                gentlement.style.top = (gent.GetPosition().y * WebDE.GameObjects.Stage.CurrentStage.GetTileSize().get_Item2()) + "px";
                gentlement.style.opacity = gent.GetOpacity();
                this.gameEntitiesToUpdate.Remove(gent.GetId());
            }
            if(gent.GetSprite() == null)
            {
                return;
            }
            var frameId=gent.GetSprite().Animate();
            if(frameId != gent.GetSprite().GetCurrentRenderFrame())
            {
                this.RemoveClass(gentlement,gent.GetSprite().GetCurrentRenderFrame());
                this.AddClass(gentlement,frameId);
                gent.GetSprite().SetCurrentRenderFrame(frameId);
                gentlement.style.width = gent.GetSprite().GetSize().width + "px";
                gentlement.style.height = gent.GetSprite().GetSize().height + "px";
            }
        },
        DestroyGameEntity:function(gent)
        {
            var gentlement=this.elementsByGameObjectId.get_Item$$TKey(gent.GetId());
            if(gentlement != null)
            {
                try
                {
                    gentlement.parentElement.removeChild(gentlement);
                    this.elementsByGameObjectId.Remove(gent.GetId());
                }
                catch(ex)
                {
                    WebDE.Debug.log("Failed to destroy " + gent.GetId() + " ( " + gent.GetName() + " ) :");
                    WebDE.Debug.log(ex.get_Message());
                }
            }
        },
        RenderGUILayer:function(glayer)
        {
            var layerElem=this.elementsByGuiId.get_Item$$TKey(glayer.GetId());
            if(layerElem == null)
            {
                layerElem = this.document.createElement("div");
                layerElem.id = glayer.GetName();
                this.AddClass(layerElem,"GUILayer");
                this.document.getElementById("gameWrapper").appendChild(layerElem);
                this.elementsByGuiId.set_Item$$TKey(glayer.GetId(),layerElem);
            }
            if(this.guiElementsToUpdate.Contains(glayer.GetId()))
            {
                this.guiElementsToUpdate.Remove(glayer.GetId());
            }
            if(glayer.Visible())
            {
                layerElem.style.display = "inline";
            }
            else
            {
                layerElem.style.display = "none";
            }
            if(glayer.FollowingCursor() == true)
            {
                glayer.SetPosition(WebDE.InputManager.InputDevice.Mouse.GetAxisPosition(0) - (glayer.GetSize().width / 2),WebDE.InputManager.InputDevice.Mouse.GetAxisPosition(1) - (glayer.GetSize().height / 2));
                layerElem.style.position = "absolute";
            }
            if(glayer.GetPosition().x > 0)
            {
                layerElem.style.left = glayer.GetPosition().x + "px";
            }
            else
            {
                layerElem.style.right = Math.abs(glayer.GetPosition().x) + "px";
            }
            if(glayer.GetPosition().y > 0)
            {
                layerElem.style.top = glayer.GetPosition().y + "px";
            }
            else
            {
                layerElem.style.bottom = Math.abs(glayer.GetPosition().y) + "px";
            }
            layerElem.style.width = glayer.GetSize().width + "px";
            layerElem.style.height = glayer.GetSize().height + "px";
        },
        RenderGUIElement:function(gelm)
        {
            var gentlement=this.elementsByGuiId.get_Item$$TKey(gelm.GetId());
            if(gentlement == null)
            {
                gentlement = this.document.createElement("div");
                this.AddClass(gentlement,"GUIElement");
                this.elementsByGuiId.get_Item$$TKey(gelm.GetParentLayer().GetId()).appendChild(gentlement);
                if(gelm.GetText() != "" && gelm.GetSprite() == null)
                {
                    gentlement.style.width = (gelm.GetText().length * 12) + "px";
                    gentlement.style.height = 12 + "px";
                    gentlement.innerText = gelm.GetText();
                }
                else
                {
                    gentlement.style.width = gelm.GetSize().width + " px";
                    gentlement.style.height = gelm.GetSize().height + "px";
                }
                var styleString="";
                var $it60=gelm.GetStyles().GetEnumerator();
                while($it60.MoveNext())
                {
                    var style=$it60.get_Current();
                    styleString += style + " ";
                }
                this.AddClass(gentlement,styleString);
                this.elementsByGuiId.set_Item$$TKey(gelm.GetId(),gentlement);
            }
            if(this.guiElementsToUpdate.Contains(gelm.GetId()))
            {
                gentlement.innerText = gelm.GetText();
                gentlement.style.left = gelm.GetPosition().x + "px";
                gentlement.style.top = gelm.GetPosition().y + "px";
                if(gelm.GetStyle("Background") != null)
                {
                    gentlement.style.background = gelm.GetStyle("Background");
                }
                this.guiElementsToUpdate.Remove(gelm.GetId());
            }
            if(gelm.GetSprite() == null)
            {
                return;
            }
            gentlement.innerText = "";
            var frameId=gelm.GetSprite().Animate();
            if(frameId != gelm.GetSprite().GetCurrentRenderFrame())
            {
                this.RemoveClass(gentlement,gelm.GetSprite().GetCurrentRenderFrame());
                this.AddClass(gentlement,frameId);
                gelm.GetSprite().SetCurrentRenderFrame(frameId);
                gentlement.style.width = gelm.GetSprite().GetSize().width + "px";
                gentlement.style.height = gelm.GetSprite().GetSize().height + "px";
            }
        },
        RenderLightSource:function(light)
        {
            var gentlement=this.elementsByGameObjectId.get_Item$$TKey(light.GetId());
            if(gentlement == null)
            {
                WebDE.Debug.log("Rendering light " + light.GetId());
                gentlement = this.document.createElement("div");
                this.AddClass(gentlement,"Entity LightSource");
                this.AddClass(gentlement,light.GetType().get_Name());
                var $it61=light.GetCustomStyles().GetEnumerator();
                while($it61.MoveNext())
                {
                    var style=$it61.get_Current();
                    this.AddClass(gentlement,style);
                }
                this.document.getElementById("gameBoard").appendChild(gentlement);
                if(light.GetType().get_Name() == "Lightstone")
                {
                    gentlement.style.background = WebDE.Rendering.Gradient.LightStone(light.GetColor());
                    WebDE.Debug.log(WebDE.Rendering.Gradient.LightStone(light.GetColor()));
                }
                else
                {
                    gentlement.style.background = WebDE.Rendering.Gradient.ToString$$Color(light.GetColor());
                }
                this.elementsByGameObjectId.set_Item$$TKey(light.GetId(),gentlement);
            }
            var tileSize=WebDE.GameObjects.Stage.CurrentStage.GetTileSize();
            var posShift=Cast(light.GetRange(),System.Int32.ctor) / 2;
            gentlement.style.left = ((light.GetPosition().x - posShift) * tileSize.get_Item1()) + "px";
            gentlement.style.top = ((light.GetPosition().y - posShift) * tileSize.get_Item2()) + "px";
            gentlement.style.width = (light.GetRange() * tileSize.get_Item1()) + "px";
            gentlement.style.height = (light.GetRange() * tileSize.get_Item2()) + "px";
            if(light.Visible() == true)
            {
                gentlement.style.display = "inline";
            }
            else
            {
                gentlement.style.display = "none";
            }
            var lightLeftInGameUnits=Cast(light.GetPosition().x,System.Int32.ctor) - posShift;
            var lightRightInGameUnits=Cast((lightLeftInGameUnits + light.GetRange()),System.Int32.ctor);
            var lightTopInGameUnits=Cast(light.GetPosition().y,System.Int32.ctor) - posShift;
            var lightBottomInGameUnits=Cast((lightTopInGameUnits + light.GetRange()),System.Int32.ctor);
        },
        AddClass:function(elem,className)
        {
            var thisClass=elem.className;
            if(!thisClass.Contains(className))
            {
                thisClass += " " + className;
            }
            elem.className = thisClass;
        },
        RemoveClass:function(elem,className)
        {
            var thisClass=elem.className;
            if(thisClass.Contains(className))
            {
                var cni=thisClass.indexOf(className);
                if(cni > 0)
                {
                    thisClass = thisClass.Remove$$Int32$$Int32(cni - 1,className.length);
                }
                else
                {
                    thisClass = thisClass.Remove$$Int32$$Int32(cni,className.length);
                }
            }
            elem.className = thisClass;
        },
        Resize:function()
        {
            var wrapperWidth=this.getOuterWidth(this.document.getElementById("gameWrapper"));
            var wrapperHeight=this.getOuterHeight(this.document.getElementById("gameWrapper"));
            var boardWidth=this.getOuterWidth(this.document.getElementById("gameBoard"));
            var boardHeight=this.getOuterHeight(this.document.getElementById("gameBoard"));
            this.x = (wrapperWidth - boardWidth) / 2;
            this.y = (wrapperHeight - boardHeight) / 2;
            this.document.getElementById("gameBoard").style.position = "absolute";
            this.document.getElementById("gameBoard").style.left = this.x + "px";
            this.document.getElementById("gameBoard").style.top = this.y + "px";
        },
        BoardArea:function()
        {
            var boardWidth=this.getOuterWidth(this.document.getElementById("gameBoard"));
            var boardHeight=this.getOuterHeight(this.document.getElementById("gameBoard"));
            return new WebDE.Rectangle.ctor(this.x,this.y,boardWidth,boardHeight);
        },
        getOuterWidth:function(elem)
        {
            var returnVal=elem.clientWidth;
            returnVal += (WebDE.GameObjects.Helpah.Parse(elem.style.borderWidth) * 2);
            returnVal += WebDE.GameObjects.Helpah.Parse(elem.style.marginLeft);
            returnVal += WebDE.GameObjects.Helpah.Parse(elem.style.marginRight);
            return returnVal;
        },
        getOuterHeight:function(elem)
        {
            return elem.offsetHeight + (WebDE.GameObjects.Helpah.Parse(elem.style.borderWidth) * 2) + WebDE.GameObjects.Helpah.Parse(elem.style.marginTop) + WebDE.GameObjects.Helpah.Parse(elem.style.marginBottom);
        },
        RebuildAnimationFrames:function()
        {
            if(this.document.getElementById("animFrameClasses") != null)
            {
                this.document.body.removeChild(this.document.getElementById("animFrameClasses"));
            }
            var animFrmCssContents="";
            var $it62=WebDE.Animation.AnimationFrame.GetAnimationFrames().GetEnumerator();
            while($it62.MoveNext())
            {
                var animFrame=$it62.get_Current();
                var framePos=animFrame.getPosition();
                animFrmCssContents += "." + animFrame.getId() + " { " + "background-image: url(\'" + animFrame.getImage() + "\'); " + "background-position-x: " + framePos.get_Item1() + "px; " + "background-position-y: " + framePos.get_Item2() + "px; " + " }";
            }
            var framesStyle=this.document.createElement("style");
            framesStyle.innerHTML = animFrmCssContents;
            this.document.body.appendChild(framesStyle);
        },
        SetNeedsUpdate$$GameEntity:function(gent)
        {
            if(!this.gameEntitiesToUpdate.Contains(gent.GetId()))
            {
                this.gameEntitiesToUpdate.Add(gent.GetId());
            }
        },
        SetNeedsUpdate$$GuiElement:function(gelm)
        {
            if(!this.guiElementsToUpdate.Contains(gelm.GetId()))
            {
                this.guiElementsToUpdate.Add(gelm.GetId());
            }
        },
        SetNeedsUpdate$$GuiLayer:function(layer)
        {
            if(!this.guiElementsToUpdate.Contains(layer.GetId()))
            {
                this.guiElementsToUpdate.Add(layer.GetId());
            }
        },
        GetSize:function()
        {
            return new WebDE.Dimension.ctor$$Double$$Double(this.window.innerWidth,this.window.innerHeight);
        }
    }
};
JsTypes.push(WebDE$Rendering$DOM_Renderer);
var WebDE$Rendering$Gradient=
{
    fullname:"WebDE.Rendering.Gradient",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        old_ToString:function(gradientColor)
        {
            return "-webkit-radial-gradient(center, ellipse cover, rgba(" + gradientColor.red + "," + gradientColor.green + "," + gradientColor.blue + ",1) 0%, " + "rgba(" + gradientColor.red + "," + gradientColor.green + "," + gradientColor.blue + ",0.99) 1%, rgba(0,0,0,0) 100%)";
        },
        ToString$$Color:function(gradientColor)
        {
            return "-webkit-radial-gradient(center, ellipse cover, rgba(" + gradientColor.red + ", " + gradientColor.green + " , " + gradientColor.blue + ",1) 0%, " + "rgba(" + gradientColor.red + ", " + gradientColor.green + " , " + gradientColor.blue + ".99) 1%, " + "rgba(0,0,0,0) 80%);";
        },
        LightStone:function(gradientColor)
        {
            return WebDE.Rendering.Gradient.ToString$$Color(gradientColor);
        },
        Broken_LightStone:function(gradientColor)
        {
            return " -webkit-radial-gradient(center, ellipse cover,  rgba(" + gradientColor.red + "," + gradientColor.blue + "," + gradientColor.green + ",0.25) 15%,rgba(" + gradientColor.red + "," + gradientColor.blue + "," + gradientColor.green + ",0.34) 26%,rgba(" + gradientColor.red + "," + gradientColor.blue + "," + gradientColor.green + ",0.6) 59%,rgba(" + gradientColor.red + "," + gradientColor.blue + "," + gradientColor.green + ",0.65) 66%,rgba(" + gradientColor.red + "," + gradientColor.blue + "," + gradientColor.green + ",0) 85%,rgba(" + gradientColor.red + "," + gradientColor.blue + "," + gradientColor.green + ",0) 100%); ";
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WebDE$Rendering$Gradient);
var WebDE$Rendering$IRenderEngine={fullname:"WebDE.Rendering.IRenderEngine",baseTypeName:"System.Object",assemblyName:"WebDE",Kind:"Interface"};
JsTypes.push(WebDE$Rendering$IRenderEngine);
var WebDE$Rendering$Surface=
{
    fullname:"WebDE.Rendering.Surface",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Rendering.Surface.renderer = null;
        },
        Initialize:function(renderer)
        {
            WebDE.Rendering.Surface.renderer = renderer;
            WebDE.Timekeeper.Clock.AddRender($CreateDelegate(WebDE.Rendering.Surface.renderer,WebDE.Rendering.Surface.renderer.Render));
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WebDE$Rendering$Surface);
var WebDE$Rendering$View=
{
    fullname:"WebDE.Rendering.View",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Rendering.View.activeViews = new System.Collections.Generic.List$1.ctor(WebDE.Rendering.View.ctor);
            WebDE.Rendering.View.mainView = null;
        },
        GetActiveViews:function()
        {
            return WebDE.Rendering.View.activeViews;
        },
        SetMainView:function(newView)
        {
            WebDE.Rendering.View.mainView = newView;
        },
        GetMainView:function()
        {
            return WebDE.Rendering.View.mainView;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(lightStyle)
        {
            this.stgAttached = null;
            this.guiLayers = new System.Collections.Generic.List$1.ctor(WebDE.GUI.GuiLayer.ctor);
            this.size = new WebDE.Dimension.ctor$$Double$$Double(800,600);
            this.x = 0;
            this.y = 0;
            this.active = false;
            this.LightStyle = 0;
            System.Object.ctor.call(this);
            this.LightStyle = lightStyle;
            this.Activate();
            if(WebDE.Rendering.View.mainView == null)
            {
                WebDE.Rendering.View.mainView = this;
            }
        },
        IsActive:function()
        {
            return this.active;
        },
        Activate:function()
        {
            this.active = true;
            if(WebDE.Rendering.View.activeViews.Contains(this) == false)
            {
                WebDE.Rendering.View.activeViews.Add(this);
            }
        },
        Deactivate:function()
        {
            this.active = false;
            if(WebDE.Rendering.View.activeViews.Contains(this) == true)
            {
                WebDE.Rendering.View.activeViews.Remove(this);
            }
        },
        AttachStage:function(newStage)
        {
            this.stgAttached = newStage;
        },
        GetAttachedStage:function()
        {
            return this.stgAttached;
        },
        GetViewArea:function()
        {
            return new WebDE.Rectangle.ctor(this.x,this.y,this.size.width,this.size.height);
        },
        GetSize:function()
        {
            return this.size;
        },
        SetSize:function(newWidth,newHeight)
        {
            this.size.width = newWidth;
            this.size.height = newHeight;
        },
        SetPosition:function(newX,newY)
        {
            this.x = newX;
            this.y = newY;
        },
        GetArea:function()
        {
            var returnVal=new WebDE.Rectangle.ctor(this.x,this.y,this.size.width,this.size.height);
            return returnVal;
        },
        SetArea:function(newArea)
        {
            this.x = Cast(newArea.x,System.Int32.ctor);
            this.y = Cast(newArea.y,System.Int32.ctor);
            this.size.width = Cast(newArea.width,System.Int32.ctor);
            this.size.height = Cast(newArea.height,System.Int32.ctor);
        },
        AddLayer:function(layerName,layerPos)
        {
            var newLayer=new WebDE.GUI.GuiLayer.ctor(layerName,this,layerPos);
            this.guiLayers.Add(newLayer);
            return newLayer;
        },
        GetLayers:function()
        {
            return this.guiLayers;
        },
        GetVisibleEntities:function()
        {
            var returnList=new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            if(this.stgAttached != null)
            {
                returnList.AddRange(this.stgAttached.GetVisibleEntities(this));
                returnList.AddRange(this.stgAttached.GetVisibleTiles(this));
            }
            return returnList;
        },
        SetLightingStyle:function(newStyle)
        {
            this.LightStyle = newStyle;
        },
        GetLightingStyle:function()
        {
            return this.LightStyle;
        },
        resize:function()
        {
        },
        RenderLightSources:function()
        {
            var $it63=this.stgAttached.GetLights().GetEnumerator();
            while($it63.MoveNext())
            {
                var light=$it63.get_Current();
            }
        },
        GUI_Event:function(buttonFunction,clickX,clickY)
        {
            clickX -= Cast(this.GetArea().x,System.Int32.ctor);
            clickX -= Cast(this.GetArea().y,System.Int32.ctor);
            var $it64=this.guiLayers.GetEnumerator();
            while($it64.MoveNext())
            {
                var layer=$it64.get_Current();
                if(clickX > layer.GetArea().Right() || clickX < layer.GetArea().x || clickY > layer.GetArea().Bottom() || clickY < layer.GetArea().y)
                {
                    continue;
                }
                var actionLocation=new WebDE.Point.ctor(clickX,clickY);
                layer.GUI_Event(buttonFunction,actionLocation);
            }
        }
    }
};
JsTypes.push(WebDE$Rendering$View);
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$Animation$Animation=
{
    fullname:"WebDE.Animation.Animation",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        FromSpriteSheet:function(imgSheetLocation,frameWidth,frameHeight,framePositions)
        {
            var resultAnim=new WebDE.Animation.Animation.ctor();
            var $it2=framePositions.GetEnumerator();
            while($it2.MoveNext())
            {
                var point=$it2.get_Current();
                var animFrame=new WebDE.Animation.AnimationFrame.ctor(imgSheetLocation,Cast(System.Math.Round$$Double(point.x),System.Int32.ctor),Cast(System.Math.Round$$Double(point.y),System.Int32.ctor));
                resultAnim.AddFrame(animFrame);
            }
            return resultAnim;
        },
        SingleFrame:function(frame)
        {
            var returnAnim=new WebDE.Animation.Animation.ctor();
            returnAnim.AddFrame(frame);
            return returnAnim;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.frames = new System.Collections.Generic.List$1.ctor(WebDE.Animation.AnimationFrame.ctor);
            this.name = "New Animation";
            this.currentFrameNum = 0;
            this.currentFrame = null;
            System.Object.ctor.call(this);
        },
        Animate:function()
        {
            if(this.currentFrame == null)
            {
                this.currentFrameNum = 0;
                this.currentFrame = this.frames.get_Item$$Int32(0);
                return this.currentFrame.getId();
            }
            if(this.currentFrameNum >= this.currentFrame.getDisplayLength())
            {
                this.nextFrame();
            }
            else
            {
                this.currentFrameNum++;
            }
            return this.currentFrame.getId();
        },
        GetName:function()
        {
            return this.name;
        },
        SetName:function(newName)
        {
            this.name = newName;
        },
        AddFrame:function(sourceFrame)
        {
            this.frames.Add(sourceFrame);
            return true;
        },
        RemoveFrame:function()
        {
            return true;
        },
        GetCurrentFrame:function()
        {
            return this.currentFrame;
        },
        nextFrame:function()
        {
            var foundFrame=false;
            for(var i=0;i < this.frames.get_Count();i++)
            {
                if(this.frames.get_Item$$Int32(i) == this.currentFrame && i < this.frames.get_Count() - 1)
                {
                    this.currentFrame = this.frames.get_Item$$Int32(i + 1);
                    foundFrame = true;
                }
            }
            if(foundFrame == false)
            {
                this.currentFrame = this.frames.get_Item$$Int32(0);
            }
            this.currentFrameNum = 0;
        },
        cssAnimation:function()
        {
            return null;
        }
    }
};
JsTypes.push(WebDE$Animation$Animation);
var WebDE$Animation$AnimationFrame=
{
    fullname:"WebDE.Animation.AnimationFrame",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Animation.AnimationFrame.cachedFrames = new System.Collections.Generic.List$1.ctor(WebDE.Animation.AnimationFrame.ctor);
            WebDE.Animation.AnimationFrame.animFrames = new System.Collections.Generic.List$1.ctor(WebDE.Animation.AnimationFrame.ctor);
        },
        GetAnimationFrames:function()
        {
            return WebDE.Animation.AnimationFrame.animFrames;
        },
        IsFrameCached:function(imageLocation,offsetX,offsetY)
        {
            var $it3=WebDE.Animation.AnimationFrame.cachedFrames.GetEnumerator();
            while($it3.MoveNext())
            {
                var frame=$it3.get_Current();
                if(frame.AnimImage == imageLocation && frame.imageX == offsetX && frame.imageY == offsetY)
                {
                    return frame;
                }
            }
            return null;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(imageLocation,offsetX,offsetY)
        {
            this.id = null;
            this.AnimImage = null;
            this.imageX = 0;
            this.imageY = 0;
            this.displayLength = 25;
            System.Object.ctor.call(this);
            this.id = "animFrame_" + WebDE.Animation.AnimationFrame.animFrames.get_Count().toString();
            this.AnimImage = imageLocation;
            this.imageX = offsetX;
            this.imageY = offsetY;
            WebDE.Animation.AnimationFrame.animFrames.Add(this);
        },
        getId:function()
        {
            return this.id;
        },
        getDisplayLength:function()
        {
            return this.displayLength;
        },
        setDisplayLength:function(newLength)
        {
            this.displayLength = newLength;
        },
        getImage:function()
        {
            return this.AnimImage;
        },
        getPosition:function()
        {
            var returnVal=new System.Tuple$2.ctor(System.Int32.ctor,System.Int32.ctor,this.imageX,this.imageY);
            return returnVal;
        },
        markAsCached:function()
        {
            if(WebDE.Animation.AnimationFrame.cachedFrames.Contains(this) == false)
            {
                WebDE.Animation.AnimationFrame.cachedFrames.Add(this);
            }
        }
    }
};
JsTypes.push(WebDE$Animation$AnimationFrame);
var WebDE$Animation$Sprite=
{
    fullname:"WebDE.Animation.Sprite",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Animation.Sprite.loadedSprites = new System.Collections.Generic.List$1.ctor(WebDE.Animation.Sprite.ctor);
        },
        GetSpriteByName:function(spriteName)
        {
            var $it6=WebDE.Animation.Sprite.loadedSprites.GetEnumerator();
            while($it6.MoveNext())
            {
                var spr=$it6.get_Current();
                if(spr.GetName() == spriteName)
                {
                    return WebDE.GameObjects.Helpah.Clone(spr);
                }
            }
            return null;
        },
        singleFrame:function(name,width,height,frameLocation,xOffset,yOffset)
        {
            var animfrm=new WebDE.Animation.AnimationFrame.ctor(frameLocation,xOffset,yOffset);
            var annie=new WebDE.Animation.Animation.ctor();
            annie.AddFrame(animfrm);
            var newSprite=new WebDE.Animation.Sprite.ctor(name);
            newSprite.setSize(width,height);
            newSprite.addAnimation(annie);
            return newSprite;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(spriteName)
        {
            this.name = "";
            this.animations = new System.Collections.Generic.List$1.ctor(WebDE.Animation.Animation.ctor);
            this.size = new WebDE.Dimension.ctor$$Double$$Double(40,40);
            this.currentAnimation = null;
            this.defaultAnimation = null;
            this.currentRenderFrame = "";
            System.Object.ctor.call(this);
            this.name = spriteName;
            WebDE.Animation.Sprite.loadedSprites.Add(this);
        },
        GetName:function()
        {
            return this.name;
        },
        SetName:function(newName)
        {
            this.name = newName;
        },
        Animate:function()
        {
            if(this.getCurrentAnimation() != null)
            {
                return this.getCurrentAnimation().Animate();
            }
            else
            {
                return "";
            }
        },
        playAnimation:function(animationName)
        {
            var $it4=this.animations.GetEnumerator();
            while($it4.MoveNext())
            {
                var anim=$it4.get_Current();
                if(anim.GetName() == animationName)
                {
                    return true;
                }
            }
            return false;
        },
        setAnimation:function(animationName)
        {
            var $it5=this.animations.GetEnumerator();
            while($it5.MoveNext())
            {
                var anim=$it5.get_Current();
                if(anim.GetName() == animationName)
                {
                    this.currentAnimation = anim;
                    return true;
                }
            }
            return false;
        },
        addAnimation:function(animToAdd)
        {
            animToAdd = WebDE.GameObjects.Helpah.Clone(animToAdd);
            this.animations.Add(animToAdd);
        },
        getCurrentAnimation:function()
        {
            if(this.currentAnimation == null)
            {
                if(this.defaultAnimation == null)
                {
                    this.defaultAnimation = this.animations.get_Item$$Int32(0);
                }
                this.currentAnimation = this.defaultAnimation;
            }
            return this.currentAnimation;
        },
        GetSize:function()
        {
            return this.size;
        },
        setSize:function(newWidth,newHeight)
        {
            this.size.width = newWidth;
            this.size.height = newHeight;
        },
        GetCurrentRenderFrame:function()
        {
            return this.currentRenderFrame;
        },
        SetCurrentRenderFrame:function(newId)
        {
            this.currentRenderFrame = newId;
        }
    }
};
JsTypes.push(WebDE$Animation$Sprite);
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$GameObjects$Area=
{
    fullname:"WebDE.GameObjects.Area",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(left,top,horizSize,vertSize)
        {
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.height = 0;
            System.Object.ctor.call(this);
            this.x = left;
            this.y = top;
            this.width = horizSize;
            this.height = vertSize;
        },
        Contains:function(left,top)
        {
            if((left >= this.x && left <= (this.x + this.width)) && (top >= this.y && top <= (this.y + this.height)))
            {
                return true;
            }
            return false;
        }
    }
};
JsTypes.push(WebDE$GameObjects$Area);
var WebDE$GameObjects$GameEntity=
{
    fullname:"WebDE.GameObjects.GameEntity",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.GameObjects.GameEntity.cachedEntities = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            WebDE.GameObjects.GameEntity.lastid = 0;
        },
        GetById:function(id)
        {
            var $it25=WebDE.GameObjects.GameEntity.cachedEntities.GetEnumerator();
            while($it25.MoveNext())
            {
                var ent=$it25.get_Current();
                if(ent.id == id)
                {
                    return ent;
                }
            }
            return null;
        },
        GetCachedEntities:function()
        {
            return WebDE.GameObjects.GameEntity.cachedEntities;
        },
        isGameEntityLoaded:function()
        {
            return null;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(entName)
        {
            this.id = null;
            this.size = new WebDE.Dimension.ctor$$Double$$Double(40,40);
            this.strGameEntityName = "New GameEntity";
            this.sprGameEntitySprite = null;
            this.parentStage = null;
            this.opacity = 1;
            this.visible = true;
            this.customStyles = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.position = new WebDE.Point.ctor(0,0);
            this.speed = new WebDE.Vector.ctor(0,0);
            this.minSpeed = new WebDE.Vector.ctor(-10,-10);
            this.maxSpeed = new WebDE.Vector.ctor(10,10);
            this.acceleration = 1;
            this.movementAngle = -1;
            this.desiredDirection = 0;
            System.Object.ctor.call(this);
            WebDE.GameObjects.GameEntity.lastid++;
            this.id = "GameEntity_" + WebDE.GameObjects.GameEntity.lastid;
            this.strGameEntityName = entName;
            WebDE.GameObjects.GameEntity.cachedEntities.Add(this);
            var nameSprite=WebDE.Animation.Sprite.GetSpriteByName(this.strGameEntityName);
            this.SetSprite(nameSprite);
        },
        GetId:function()
        {
            return this.id;
        },
        GetName:function()
        {
            return this.strGameEntityName;
        },
        GetPosition:function()
        {
            return this.position;
        },
        SetPosition:function(newX,newY)
        {
            this.position.x = newX;
            this.position.y = newY;
            this.SetNeedsUpdate();
        },
        GetSprite:function()
        {
            return this.sprGameEntitySprite;
        },
        SetSprite:function(newSprite)
        {
            try
            {
                this.sprGameEntitySprite = WebDE.GameObjects.Helpah.Clone(newSprite);
                this.SetNeedsUpdate();
                return true;
            }
            catch(ex)
            {
                WebDE.Debug.log("Exception with SetSprite in GameEntity: " + ex.get_Message());
                return false;
            }
        },
        GetSize:function()
        {
            return this.size;
        },
        SetSize:function(newWidth,newHeight)
        {
            this.size.width = newWidth;
            this.size.height = newHeight;
            this.SetNeedsUpdate();
        },
        GetMovementAngle:function()
        {
            return this.movementAngle;
        },
        SetMovementAngle:function(newAngle)
        {
            this.movementAngle = newAngle;
        },
        GetDirection:function()
        {
            return this.desiredDirection;
        },
        SetDirection:function(newDirection)
        {
            this.desiredDirection = newDirection;
        },
        GetSpeed:function()
        {
            return this.speed;
        },
        SetSpeed:function(newSpeed)
        {
            this.speed = newSpeed;
            this.SetNeedsUpdate();
        },
        AddSpeed:function(newSpeed)
        {
            this.speed.x += newSpeed.x;
            this.speed.y += newSpeed.y;
        },
        GetAcceleration:function()
        {
            return this.acceleration;
        },
        SetAcceleration:function(newAccel)
        {
            this.acceleration = newAccel;
        },
        GetParentStage:function()
        {
            return this.parentStage;
        },
        SetParentStage:function(newStage)
        {
            this.parentStage = newStage;
        },
        Destroy:function()
        {
            WebDE.GameObjects.Stage.CurrentStage.RemoveGameEntity(this);
            WebDE.Rendering.DOM_Renderer.GetRenderer().DestroyGameEntity(this);
            WebDE.GameObjects.Helpah.Destroy(this);
        },
        CalculateSpeed:function()
        {
            if(Is(this,WebDE.GameObjects.GameEntitySpawner.ctor))
            {
                return;
            }
            if(this.desiredDirection == -1)
            {
                this.speed.x -= this.acceleration;
            }
            else if(this.desiredDirection == 1)
            {
                this.speed.x += this.acceleration;
            }
            else if(this.desiredDirection == -2)
            {
                this.speed.y -= this.acceleration;
            }
            else if(this.desiredDirection == 2)
            {
                this.speed.y += this.acceleration;
            }
            else if(this.desiredDirection == 0)
            {
                if(this.speed.x > 0)
                {
                    this.speed.x -= this.acceleration;
                }
                else if(this.speed.x < 0)
                {
                    this.speed.x += this.acceleration;
                }
                if(this.speed.y > 0)
                {
                    this.speed.y -= this.acceleration;
                }
                else if(this.speed.y < 0)
                {
                    this.speed.y += this.acceleration;
                }
            }
            if(this.speed.x > this.maxSpeed.x)
            {
                this.speed.x = this.maxSpeed.x;
            }
            if(this.speed.x < this.minSpeed.x)
            {
                this.speed.x = this.minSpeed.x;
            }
            if(this.speed.y > this.maxSpeed.y)
            {
                this.speed.y = this.maxSpeed.y;
            }
            if(this.speed.y < this.minSpeed.y)
            {
                this.speed.y = this.minSpeed.y;
            }
        },
        CalculatePosition:function()
        {
            this.position.x += this.speed.x;
            this.position.y += this.speed.y;
        },
        CheckCollision:function()
        {
        },
        SetNeedsUpdate:function()
        {
            WebDE.Rendering.DOM_Renderer.GetRenderer().SetNeedsUpdate$$GameEntity(this);
        },
        AddCustomStyling:function(styleName)
        {
            if(!this.customStyles.Contains(styleName))
            {
                this.customStyles.Add(styleName);
            }
        },
        GetCustomStyles:function()
        {
            return this.customStyles;
        },
        SetOpcaity:function(newOpacity)
        {
            this.opacity = newOpacity;
            this.SetNeedsUpdate();
        },
        GetOpacity:function()
        {
            return this.opacity;
        },
        Hide:function()
        {
            this.visible = false;
            this.SetNeedsUpdate();
        },
        Show:function()
        {
            this.visible = true;
            this.SetNeedsUpdate();
        },
        Visible:function()
        {
            return this.visible;
        }
    }
};
JsTypes.push(WebDE$GameObjects$GameEntity);
var WebDE$GameObjects$GameEntityBatch=
{
    fullname:"WebDE.GameObjects.GameEntityBatch",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(GameEntityType,GameEntityCount,spawnDelay)
        {
            this.GameEntityType = null;
            this.GameEntityCount = 0;
            this.spawnDelay = 0;
            System.Object.ctor.call(this);
            this.GameEntityType = GameEntityType;
            this.GameEntityCount = GameEntityCount;
            this.spawnDelay = spawnDelay;
        }
    }
};
JsTypes.push(WebDE$GameObjects$GameEntityBatch);
var WebDE$GameObjects$GameEntitySpawner=
{
    fullname:"WebDE.GameObjects.GameEntitySpawner",
    baseTypeName:"WebDE.GameObjects.GameEntity",
    staticDefinition:
    {
        cctor:function()
        {
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(itemName,initialDelay)
        {
            this.spawnBatches = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntityBatch.ctor);
            this.currentSpawnDelay = 0;
            this.clockId = null;
            WebDE.GameObjects.GameEntity.ctor.call(this,itemName);
            this.currentSpawnDelay = initialDelay;
            WebDE.Timekeeper.Clock.IntervalExecute($CreateDelegate(this,this.Think),1);
        },
        AddGameEntityBatch:function(GameEntityType,GameEntityCount,spawnDelay)
        {
            var newBatch=new WebDE.GameObjects.GameEntityBatch.ctor(GameEntityType,GameEntityCount,spawnDelay);
            this.spawnBatches.Add(newBatch);
        },
        AddGameEntityBatches:function(GameEntityType,GameEntityCount,batchCount,spawnDelay)
        {
            while(batchCount > 0)
            {
                this.AddGameEntityBatch(GameEntityType,GameEntityCount,spawnDelay);
                batchCount--;
            }
        },
        Activate:function()
        {
            this.clockId = WebDE.Timekeeper.Clock.AddCalculation($CreateDelegate(this,this.Think));
        },
        Deactivate:function()
        {
            if(this.clockId != null)
            {
                WebDE.Timekeeper.Clock.RemoveCalculation(this.clockId);
            }
        },
        Think:function()
        {
            if(this.spawnBatches.get_Count() > 0)
            {
                if(this.currentSpawnDelay > 0)
                {
                    this.currentSpawnDelay--;
                    return;
                }
                var batchToSpawn=this.spawnBatches.get_Item$$Int32(0);
                var entitiesToSpawn=this.spawnBatches.get_Item$$Int32(0).GameEntityCount;
                while(entitiesToSpawn > 0)
                {
                    var entSrc=Cast(this.spawnBatches.get_Item$$Int32(0).GameEntityType,WebDE.GameObjects.LivingGameEntity.ctor);
                    var newEnt=WebDE.GameObjects.Helpah.Clone(this.spawnBatches.get_Item$$Int32(0).GameEntityType);
                    newEnt.SetPosition(this.GetPosition().x,this.GetPosition().y);
                    newEnt.SetAI(entSrc.GetAI());
                    newEnt.SetParentStage(this.GetParentStage());
                    this.GetParentStage().AddLivingGameEntity(newEnt);
                    entitiesToSpawn--;
                }
                this.currentSpawnDelay = this.spawnBatches.get_Item$$Int32(0).spawnDelay;
                this.spawnBatches.RemoveAt(0);
            }
            else
            {
                this.Deactivate();
            }
        }
    }
};
JsTypes.push(WebDE$GameObjects$GameEntitySpawner);
var WebDE$GameObjects$Helpah=
{
    fullname:"WebDE.GameObjects.Helpah",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
        },
        Clone:function(o)
        {
            if(o == null)
            {
                return null;
            }
            return $.extend(true,new System.Object.ctor(),o);
        },
        Destroy:function(o)
        {
            o = null;
        },
        Round$$Double:function(number)
        {
            var numString=number.toString();
            if(numString.indexOf(".") > -1)
            {
                numString = numString.substr(0,numString.indexOf("."));
            }
            return System.Int32.Parse$$String(numString);
        },
        Round$$Double$$Int32:function(number,decimalPlaces)
        {
            var numString=number.toString();
            if(numString.indexOf(".") > -1)
            {
                var numString1=numString.substr(0,numString.indexOf("."));
                var numString2=numString.substr(numString.indexOf("."),decimalPlaces + 1);
                numString = numString1 + numString2;
            }
            return parseFloat(numString);
        },
        Parse:function(s)
        {
            var returnVal=0;
            var i=0;
            while(i < s.length)
            {
                if(System.Char.IsDigit$$Char(s.charAt(i)))
                {
                    returnVal = returnVal * 10;
                    returnVal += s.charAt(i);
                }
                i++;
            }
            return returnVal;
        },
        Rand:function(min,max)
        {
            var bit=min + (Math.random() * ((max - min) + 1));
            return Cast(System.Math.Floor$$Double(bit),System.Int32.ctor);
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WebDE$GameObjects$Helpah);
var WebDE$GameObjects$LightSource=
{
    fullname:"WebDE.GameObjects.LightSource",
    baseTypeName:"WebDE.GameObjects.GameEntity",
    staticDefinition:
    {
        cctor:function()
        {
        },
        GetLocalLightSources:function(xPos,yPos)
        {
            var returnLights=new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.LightSource.ctor);
            var $it26=WebDE.GameObjects.Stage.CurrentStage.GetLights().GetEnumerator();
            while($it26.MoveNext())
            {
                var light=$it26.get_Current();
                if(light.GetPosition().Distance(new WebDE.Point.ctor(xPos,yPos)) <= light.range)
                {
                    returnLights.Add(light);
                }
            }
            return returnLights;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(x,y,lightness,distance)
        {
            this.luminosity = 1;
            this.range = 3;
            this.color = new WebDE.Color.ctor(255,255,255);
            this.needsRenderUpdate = false;
            this.diminishing = false;
            WebDE.GameObjects.GameEntity.ctor.call(this,"");
            this.SetPosition(x,y);
            this.luminosity = lightness;
            this.range = distance;
            if(WebDE.Rendering.View.GetMainView() == null)
            {
                this.CalculateIllumination();
            }
            WebDE.GameObjects.Stage.CurrentStage.AddLight(this);
        },
        GetLuminosity:function()
        {
            return this.luminosity;
        },
        SetLuminosity:function(newVal)
        {
            this.luminosity = newVal;
        },
        GetRange:function()
        {
            return this.range;
        },
        SetRange:function(newRange)
        {
            this.range = newRange;
            this.SetNeedsUpdate();
        },
        GetColor:function()
        {
            return this.color;
        },
        SetColor:function(newColor)
        {
            this.color = newColor;
            this.needsRenderUpdate = true;
        },
        SetDiminishing:function(isDiminishing)
        {
            this.diminishing = isDiminishing;
        },
        GetDiminishing:function()
        {
            return this.diminishing;
        },
        CalculateIllumination:function()
        {
            var localTiles=WebDE.GameObjects.Stage.CurrentStage.GetVisibleTiles(WebDE.Rendering.View.GetMainView());
            var $it27=localTiles.GetEnumerator();
            while($it27.MoveNext())
            {
                var localTile=$it27.get_Current();
                if(localTile.GetPosition().Distance(this.GetPosition()) <= this.range)
                {
                }
            }
        },
        Think:function()
        {
            if(this.GetDiminishing() == true)
            {
                this.SetRange(this.GetRange() - 0.1);
                if(this.GetRange() < 0.1)
                {
                    this.Destroy();
                }
            }
        }
    }
};
JsTypes.push(WebDE$GameObjects$LightSource);
var WebDE$GameObjects$LivingGameEntity=
{
    fullname:"WebDE.GameObjects.LivingGameEntity",
    baseTypeName:"WebDE.GameObjects.GameEntity",
    staticDefinition:
    {
        cctor:function()
        {
        },
        CloneByName:function(lentName)
        {
            var $it28=WebDE.GameObjects.GameEntity.GetCachedEntities().GetEnumerator();
            while($it28.MoveNext())
            {
                var gent=$it28.get_Current();
                if(gent.GetName() == lentName)
                {
                    return gent;
                }
            }
            return null;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(entName,health)
        {
            this.health = 0;
            this.ai = null;
            this.weapons = null;
            WebDE.GameObjects.GameEntity.ctor.call(this,entName);
            this.health = health;
            this.ai = new WebDE.AI.ArtificialIntelligence.ctor();
            this.weapons = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.Weapon.ctor);
        },
        GetAI:function()
        {
            return this.ai;
        },
        SetAI:function(newAi)
        {
            this.ai = WebDE.GameObjects.Helpah.Clone(newAi);
            this.ai.SetBody(this);
        },
        Think:function()
        {
            if(this.ai != null)
            {
                this.ai.SetBody(this);
                this.ai.Think();
            }
        },
        Damage:function(Amount)
        {
        },
        Kill:function()
        {
        },
        AddWeapon:function(weaponToAdd)
        {
            weaponToAdd = WebDE.GameObjects.Helpah.Clone(weaponToAdd);
            this.weapons.Add(weaponToAdd);
        },
        GetWeapons:function()
        {
            return this.weapons;
        },
        SetHealth:function(newHealth)
        {
            this.health = newHealth;
        },
        GetHealth:function()
        {
            return this.health;
        }
    }
};
JsTypes.push(WebDE$GameObjects$LivingGameEntity);
var WebDE$GameObjects$Projectile=
{
    fullname:"WebDE.GameObjects.Projectile",
    baseTypeName:"WebDE.GameObjects.LivingGameEntity",
    staticDefinition:
    {
        cctor:function()
        {
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(projectileName,targetPoint)
        {
            this.damage = 0;
            this.impactEvent = null;
            this.targetPoint = null;
            WebDE.GameObjects.LivingGameEntity.ctor.call(this,projectileName,10);
            this.targetPoint = targetPoint;
            var ai=new WebDE.AI.ArtificialIntelligence.ctor();
        },
        SetPosition:function(newX,newY)
        {
            WebDE.GameObjects.GameEntity.commonPrototype.SetPosition.call(this,newX,newY);
            var newPath=new WebDE.AI.MovementPath.ctor((function()
            {
                var $v1=new System.Collections.Generic.List$1.ctor(WebDE.Point.ctor);
                $v1.Add(this.GetPosition());
                $v1.Add(this.targetPoint);
                return $v1;
            }).call(this));
            var newAi=new WebDE.AI.ArtificialIntelligence.ctor();
            newAi.SetMovementPath(newPath);
            this.SetAI(newAi);
        },
        SetDamage:function(newDamage)
        {
            this.damage = newDamage;
        },
        GetDamage:function()
        {
            return this.damage;
        },
        Collision:function()
        {
            if(this.impactEvent != null)
            {
                this.impactEvent();
            }
        }
    }
};
JsTypes.push(WebDE$GameObjects$Projectile);
var WebDE$GameObjects$Resource=
{
    fullname:"WebDE.GameObjects.Resource",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.GameObjects.Resource.gameResources = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.Resource.ctor);
        },
        GetIdResourceByName:function(resourceName)
        {
            var $it29=WebDE.GameObjects.Resource.gameResources.GetEnumerator();
            while($it29.MoveNext())
            {
                var res=$it29.get_Current();
                if(res.name == resourceName)
                {
                    return res.id;
                }
            }
            return 0;
        },
        ByName:function(resourceName)
        {
            var $it30=WebDE.GameObjects.Resource.gameResources.GetEnumerator();
            while($it30.MoveNext())
            {
                var res=$it30.get_Current();
                if(res.name == resourceName)
                {
                    return res;
                }
            }
            return null;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(resourceName)
        {
            this.id = 0;
            this.name = null;
            this.amount = 0;
            System.Object.ctor.call(this);
            this.id = WebDE.GameObjects.Resource.gameResources.get_Count() + 1;
            this.name = resourceName;
            this.amount = 0;
        },
        SetName:function(newName)
        {
        },
        SetAmount:function(newAmount)
        {
        }
    }
};
JsTypes.push(WebDE$GameObjects$Resource);
var WebDE$GameObjects$Stage=
{
    fullname:"WebDE.GameObjects.Stage",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.GameObjects.Stage.CurrentStage = null;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(stageName,stageType)
        {
            this.strStageName = "New Stage";
            this.stageEntities = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            this.livingEntities = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.LivingGameEntity.ctor);
            this.stageTiles = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.Tile.ctor);
            this.stageLights = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.LightSource.ctor);
            this.stageAreas = null;
            this.collisionMap = null;
            this.stageGui = null;
            this.backgroundColor = WebDE.Color.Black;
            this.size = new WebDE.Dimension.ctor$$Double$$Double(20,16);
            this.tileWidth = 40;
            this.tileHeight = 40;
            System.Object.ctor.call(this);
            this.SetName(stageName);
            if(WebDE.GameObjects.Stage.CurrentStage == null)
            {
                WebDE.GameObjects.Stage.CurrentStage = this;
            }
            var viewRect=WebDE.Rendering.View.GetMainView().GetViewArea();
        },
        Load:function()
        {
            var $it31=this.stageEntities.GetEnumerator();
            while($it31.MoveNext())
            {
                var ent=$it31.get_Current();
            }
        },
        getName:function()
        {
            return this.strStageName;
        },
        SetName:function(newName)
        {
            this.strStageName = newName;
        },
        AddGameEntity:function(GameEntityToAdd)
        {
            if(Is(GameEntityToAdd,WebDE.GameObjects.LivingGameEntity.ctor) || Is(GameEntityToAdd,WebDE.GameObjects.Tile.ctor))
            {
                WebDE.Debug.log("You\'re trying to add a living GameEntity or tile as a regular GameEntity.");
            }
            this.stageEntities.Add(GameEntityToAdd);
            GameEntityToAdd.SetParentStage(this);
        },
        RemoveGameEntity:function(GameEntityToRemove)
        {
            if(Is(GameEntityToRemove,WebDE.GameObjects.LightSource.ctor))
            {
                var lightToRemove=Cast(GameEntityToRemove,WebDE.GameObjects.LightSource.ctor);
                if(this.stageLights.Contains(lightToRemove))
                {
                    this.stageLights.Remove(lightToRemove);
                }
            }
            else if(Is(GameEntityToRemove,WebDE.GameObjects.Tile.ctor))
            {
                var tileToRemove=Cast(GameEntityToRemove,WebDE.GameObjects.Tile.ctor);
                if(this.stageTiles.Contains(tileToRemove))
                {
                    this.stageTiles.Remove(tileToRemove);
                }
            }
            else
            {
                if(this.stageEntities.Contains(GameEntityToRemove))
                {
                    this.stageEntities.Remove(GameEntityToRemove);
                }
            }
        },
        AddTile:function(name,walkable,buildable)
        {
            var newTile=new WebDE.GameObjects.Tile.ctor(name,walkable,buildable);
            this.stageTiles.Add(newTile);
            return newTile;
        },
        AppendTile:function(tileToAdd)
        {
            this.stageTiles.Add(tileToAdd);
        },
        AddLivingGameEntity:function(toAdd)
        {
            this.livingEntities.Add(toAdd);
        },
        GetVisibleEntities:function(viewer)
        {
            var resultList=new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            var $it32=this.stageEntities.GetEnumerator();
            while($it32.MoveNext())
            {
                var ent=$it32.get_Current();
                resultList.Add(ent);
            }
            var $it33=this.livingEntities.GetEnumerator();
            while($it33.MoveNext())
            {
                var lent=$it33.get_Current();
                resultList.Add(lent);
            }
            return resultList;
        },
        GetVisibleTiles:function(viewer)
        {
            var resultList=new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            var $it34=this.stageTiles.GetEnumerator();
            while($it34.MoveNext())
            {
                var tile=$it34.get_Current();
                if(tile.GetLightLevel() != this.GetBackgroundColor())
                {
                    resultList.Add(tile);
                }
            }
            return resultList;
        },
        GetSize:function()
        {
            return this.size;
        },
        SetSize:function(newWidth,newHeight)
        {
            this.size.width = newWidth;
            this.size.height = newHeight;
        },
        CreateRandomTiles:function()
        {
            for(var h=0;h < this.size.height;h++)
            {
                for(var w=0;w < this.size.width;w++)
                {
                    var rand=Math.round(Math.random());
                    var buildable=false;
                    if(rand == 1)
                    {
                        buildable = true;
                    }
                    var aTile=new WebDE.GameObjects.Tile.ctor("",true,buildable);
                    aTile.SetParentStage(this);
                    aTile.SetPosition(w,h);
                    this.stageTiles.Add(aTile);
                }
            }
        },
        CalculateEntities:function()
        {
            var $it35=this.livingEntities.GetEnumerator();
            while($it35.MoveNext())
            {
                var lent=$it35.get_Current();
                lent.Think();
            }
            var $it36=this.stageEntities.GetEnumerator();
            while($it36.MoveNext())
            {
                var ent=$it36.get_Current();
                try
                {
                }
                catch($$e1)
                {
                }
            }
            var $it37=this.livingEntities.GetEnumerator();
            while($it37.MoveNext())
            {
                var ent=$it37.get_Current();
                if(Is(ent,WebDE.GameObjects.Projectile.ctor))
                {
                    if(!this.GetBounds().Contains(ent.GetPosition()))
                    {
                        WebDE.Debug.log(ent.GetPosition().x + "," + ent.GetPosition().y + " isn\'t in " + this.GetBounds().x + "," + this.GetBounds().width + "," + this.GetBounds().y + "," + this.GetBounds().height);
                        ent.Destroy();
                    }
                }
            }
        },
        CalculateGameEntityPhysics:function()
        {
            var $it38=this.stageEntities.GetEnumerator();
            while($it38.MoveNext())
            {
                var ent=$it38.get_Current();
                ent.CalculateSpeed();
                ent.CalculatePosition();
            }
            var $it39=this.livingEntities.GetEnumerator();
            while($it39.MoveNext())
            {
                var lent=$it39.get_Current();
                lent.CalculateSpeed();
                lent.CalculatePosition();
            }
        },
        CalculateLights:function()
        {
            for(var i=0;i < this.GetLights().get_Count();i++)
            {
                var light=this.GetLights().get_Item$$Int32(i);
                if(light != null)
                {
                    light.Think();
                }
            }
        },
        GetTileSize:function()
        {
            return new System.Tuple$2.ctor(System.Int32.ctor,System.Int32.ctor,this.tileWidth,this.tileHeight);
        },
        SetTileSize:function(newWidth,newHeight)
        {
            this.tileWidth = newWidth;
            this.tileHeight = newHeight;
        },
        GetLights:function()
        {
            return this.stageLights;
        },
        AddLight:function(newLight)
        {
            if(!this.stageLights.Contains(newLight))
            {
                this.stageLights.Add(newLight);
            }
        },
        Subdivide:function()
        {
            this.stageAreas = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.Area.ctor);
            return this.stageAreas;
        },
        IsSubdivided:function()
        {
            if(this.stageAreas == null)
            {
                return false;
            }
            else
            {
                return true;
            }
        },
        GetCollisionMap:function()
        {
            if(this.collisionMap == null)
            {
                this.RenderCollisionMap();
            }
            return this.collisionMap;
        },
        RenderCollisionMap:function()
        {
            this.collisionMap = WebDE.GUI.GuiLayer.AsCollisionMap(this);
        },
        ShowCollisionMap:function()
        {
            if(this.collisionMap == null)
            {
                this.RenderCollisionMap();
            }
            this.collisionMap.Activate();
            this.collisionMap.Show();
        },
        HideCollisionMap:function()
        {
            this.collisionMap.Deactivate();
            this.collisionMap.Hide();
        },
        GetBounds:function()
        {
            return new WebDE.Rectangle.ctor(0,0,this.size.width,this.size.height);
        },
        GetTileAt:function(xPos,yPos)
        {
            var $it40=this.stageTiles.GetEnumerator();
            while($it40.MoveNext())
            {
                var tile=$it40.get_Current();
                if(tile.GetPosition().x == xPos && tile.GetPosition().y == yPos)
                {
                    return tile;
                }
            }
            return null;
        },
        GetEntitiesNear:function(p,distance)
        {
            var returnVals=new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            var $it41=this.stageEntities.GetEnumerator();
            while($it41.MoveNext())
            {
                var gent=$it41.get_Current();
                if(gent.GetPosition().Distance(p) <= distance)
                {
                    returnVals.Add(gent);
                }
            }
            var $it42=this.livingEntities.GetEnumerator();
            while($it42.MoveNext())
            {
                var gent=$it42.get_Current();
                if(gent.GetPosition().Distance(p) <= distance)
                {
                    returnVals.Add(gent);
                }
            }
            return returnVals;
        },
        GetLightsNear:function(p,distance)
        {
            var returnVals=new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.LightSource.ctor);
            var $it43=this.stageLights.GetEnumerator();
            while($it43.MoveNext())
            {
                var light=$it43.get_Current();
                if(light.GetPosition().Distance(p) <= distance)
                {
                    returnVals.Add(light);
                }
            }
            return returnVals;
        },
        GetBackgroundColor:function()
        {
            return this.backgroundColor;
        },
        SetBackgroundColor:function(newColor)
        {
            this.backgroundColor = newColor;
        }
    }
};
JsTypes.push(WebDE$GameObjects$Stage);
var WebDE$GameObjects$Tile=
{
    fullname:"WebDE.GameObjects.Tile",
    baseTypeName:"WebDE.GameObjects.GameEntity",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.GameObjects.Tile.loadedTiles = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.Tile.ctor);
        },
        GetByName:function(tileName)
        {
            var newTile=null;
            var $it44=WebDE.GameObjects.Tile.loadedTiles.GetEnumerator();
            while($it44.MoveNext())
            {
                var tile=$it44.get_Current();
                if(tile.GetName() == tileName)
                {
                    newTile = new WebDE.GameObjects.Tile.ctor(tileName,tile.GetWalkable(),tile.GetBuildable());
                    return newTile;
                }
            }
            if(newTile == null)
            {
                newTile = new WebDE.GameObjects.Tile.ctor(tileName,true,true);
            }
            return newTile;
        },
        oldGetByName:function(tileName)
        {
            var $it45=WebDE.GameObjects.Tile.loadedTiles.GetEnumerator();
            while($it45.MoveNext())
            {
                var tile=$it45.get_Current();
                if(tile.GetName() == tileName)
                {
                    return WebDE.GameObjects.Helpah.Clone(tile);
                }
            }
            return null;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(tileName,canWalk,canBuild)
        {
            this.lightLevel = null;
            this.isWalkable = false;
            this.isBuildable = false;
            WebDE.GameObjects.GameEntity.ctor.call(this,tileName);
            this.isWalkable = canWalk;
            this.isBuildable = canBuild;
            WebDE.GameObjects.Tile.loadedTiles.Add(this);
        },
        GetLightLevel:function()
        {
            return this.lightLevel;
        },
        SetLightLevel:function(newLevel)
        {
            this.lightLevel = new WebDE.Color.ctor(newLevel.red,newLevel.green,newLevel.blue);
        },
        CalculateLightLevel:function()
        {
            this.SetLightLevel(WebDE.Color.Black);
            var localLights=WebDE.GameObjects.LightSource.GetLocalLightSources(this.GetPosition().x,this.GetPosition().y);
            if(localLights.get_Count() == 0)
            {
                return this.lightLevel;
            }
            var reds=new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var blues=new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var greens=new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var $it46=localLights.GetEnumerator();
            while($it46.MoveNext())
            {
                var currentLight=$it46.get_Current();
                var dist=this.GetPosition().Distance(currentLight.GetPosition());
                var diminishAmount=dist * 0.1;
                var newRed=(currentLight.GetColor().red - WebDE.GameObjects.Helpah.Round$$Double(currentLight.GetColor().red * diminishAmount));
                var newGreen=(currentLight.GetColor().green - WebDE.GameObjects.Helpah.Round$$Double(currentLight.GetColor().green * diminishAmount));
                var newBlue=(currentLight.GetColor().blue - WebDE.GameObjects.Helpah.Round$$Double(currentLight.GetColor().blue * diminishAmount));
                reds.Add(newRed);
                greens.Add(newGreen);
                blues.Add(newBlue);
            }
            var avgRed=0,avgBlue=0,avgGreen=0;
            var $it47=reds.GetEnumerator();
            while($it47.MoveNext())
            {
                var curRed=$it47.get_Current();
                avgRed += curRed;
            }
            var $it48=blues.GetEnumerator();
            while($it48.MoveNext())
            {
                var curBlue=$it48.get_Current();
                avgBlue += curBlue;
            }
            var $it49=greens.GetEnumerator();
            while($it49.MoveNext())
            {
                var curGreen=$it49.get_Current();
                avgGreen += curGreen;
            }
            this.lightLevel.red = avgRed = avgRed / reds.get_Count();
            this.lightLevel.blue = avgBlue = avgBlue / blues.get_Count();
            this.lightLevel.green = avgGreen = avgGreen / greens.get_Count();
            return this.lightLevel;
        },
        old_CalculateLightLevel:function()
        {
            this.SetLightLevel(WebDE.Color.Black);
            var localLights=WebDE.GameObjects.LightSource.GetLocalLightSources(this.GetPosition().x,this.GetPosition().y);
            var $it50=localLights.GetEnumerator();
            while($it50.MoveNext())
            {
                var currentLight=$it50.get_Current();
                var dist=this.GetPosition().Distance(currentLight.GetPosition());
                var diminishAmount=dist * 0.1;
                var calculatedColor=new WebDE.Color.ctor(currentLight.GetColor().red - WebDE.GameObjects.Helpah.Round$$Double(currentLight.GetColor().red * diminishAmount),currentLight.GetColor().green - WebDE.GameObjects.Helpah.Round$$Double(currentLight.GetColor().green * diminishAmount),currentLight.GetColor().blue - WebDE.GameObjects.Helpah.Round$$Double(currentLight.GetColor().blue * diminishAmount));
                if(calculatedColor.red > this.lightLevel.red)
                {
                    this.lightLevel.red = calculatedColor.red;
                }
                if(calculatedColor.green > this.lightLevel.green)
                {
                    this.lightLevel.green = calculatedColor.green;
                }
                if(calculatedColor.blue > this.lightLevel.blue)
                {
                    this.lightLevel.blue = calculatedColor.blue;
                }
            }
            return this.lightLevel;
        },
        GetBuildable:function()
        {
            return this.isBuildable;
        },
        SetBuildable:function(buildable)
        {
            this.isBuildable = buildable;
        },
        GetWalkable:function()
        {
            return this.isWalkable;
        },
        SetWalkable:function(walkable)
        {
            this.isWalkable = walkable;
        }
    }
};
JsTypes.push(WebDE$GameObjects$Tile);
var WebDE$GameObjects$Weapon=
{
    fullname:"WebDE.GameObjects.Weapon",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(owner,damage,firingInterval,projectileSpeed,turningRadius,turnSpeed)
        {
            this.maxAmmo = 100;
            this.currentAmmo = 100;
            this.range = 0;
            this.turningRadius = 0;
            this.turningSpeed = 0;
            this.projectileSpeed = 0;
            this.damage = 0;
            this.projectileType = null;
            this.firingDelay = 0;
            this.lastFiredTime = 0;
            this.owner = null;
            this.target = null;
            this.fireWhileMoving = false;
            System.Object.ctor.call(this);
            this.owner = owner;
            this.damage = damage;
            this.firingDelay = firingInterval * 1000;
            this.projectileSpeed = projectileSpeed;
            this.turningRadius = turningRadius;
            this.turningSpeed = turnSpeed;
            this.lastFiredTime = System.DateTime.get_Now().get_Millisecond() - WebDE.GameObjects.Helpah.Round$$Double(this.firingDelay);
        },
        SimpleFire:function()
        {
        },
        Fire:function()
        {
            if(this.owner.GetParentStage() == null)
            {
                return;
            }
            if(System.DateTime.get_Now().get_Millisecond() > this.lastFiredTime + this.firingDelay)
            {
                WebDE.Debug.log("Ima firin mah lazer");
                var deltaX=Cast(System.Math.Round$$Double(this.owner.GetPosition().x - this.GetTarget().GetPosition().x),System.Int32.ctor);
                var deltaY=Cast(System.Math.Round$$Double(this.owner.GetPosition().y - this.GetTarget().GetPosition().y),System.Int32.ctor);
                var myBullet=new WebDE.GameObjects.Projectile.ctor("Bullet",this.GetTarget().GetPosition());
                myBullet.SetParentStage(this.owner.GetParentStage());
                myBullet.SetDamage(10);
                myBullet.SetPosition(this.owner.GetPosition().x,this.owner.GetPosition().y);
                myBullet.SetSpeed(new WebDE.Vector.ctor(deltaX,deltaY));
                WebDE.GameObjects.Stage.CurrentStage.AddLivingGameEntity(myBullet);
                this.SetCurrentAmmo(this.GetCurrentAmmo() - 1);
            }
        },
        SetCurrentAmmo:function(newAmmo)
        {
            this.currentAmmo = newAmmo;
        },
        GetCurrentAmmo:function()
        {
            return this.currentAmmo;
        },
        SetMaxAmmo:function(newAmmo)
        {
            this.maxAmmo = newAmmo;
        },
        GetMaxAmmo:function()
        {
            return this.maxAmmo;
        },
        SetRange:function(newRange)
        {
            this.range = newRange;
        },
        GetRange:function()
        {
            return this.range;
        },
        SetProjectileSpeed:function(newSpeed)
        {
            this.projectileSpeed = newSpeed;
        },
        GetProjectileSpeed:function()
        {
            return this.projectileSpeed;
        },
        SetTurningSpeed:function(newSpeed)
        {
            this.turningSpeed = newSpeed;
        },
        GetTurningSpeed:function()
        {
            return this.turningSpeed;
        },
        SetProjectile:function(newProjectile)
        {
            this.projectileType = newProjectile;
        },
        GetProjectile:function()
        {
            return this.projectileType;
        },
        SetFiringDelay:function(newDelay)
        {
            this.firingDelay = newDelay * 1000;
        },
        GetFiringDealy:function()
        {
            return this.firingDelay / 1000;
        },
        SetTarget:function(newTarget)
        {
            this.target = newTarget;
        },
        GetTarget:function()
        {
            return this.target;
        }
    }
};
JsTypes.push(WebDE$GameObjects$Weapon);
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$Color=
{
    fullname:"WebDE.Color",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Color.Black = new WebDE.Color.ctor(0,0,0);
            WebDE.Color.White = new WebDE.Color.ctor(255,255,255);
        },
        ToHex:function(val)
        {
            var hexstuff="ABCDEF";
            if(val < 10)
            {
                return val.toString();
            }
            else
            {
                val -= 10;
                return hexstuff.charAt(val).toString();
            }
        },
        FromHex:function(hexValue)
        {
            return new WebDE.Color.ctor(0,0,0);
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(redVal,greenVal,blueVal)
        {
            this.name = "";
            this.red = 0;
            this.green = 0;
            this.blue = 0;
            System.Object.ctor.call(this);
            this.red = redVal;
            this.green = greenVal;
            this.blue = blueVal;
        },
        GetHex:function()
        {
            var returnString="";
            var redDub=this.red / 16;
            returnString += WebDE.Color.ToHex(WebDE.GameObjects.Helpah.Round$$Double(redDub));
            redDub = this.red % 16;
            returnString += WebDE.Color.ToHex(WebDE.GameObjects.Helpah.Round$$Double(redDub));
            var blueDub=this.blue / 16;
            returnString += WebDE.Color.ToHex(WebDE.GameObjects.Helpah.Round$$Double(blueDub));
            blueDub = this.blue % 16;
            returnString += WebDE.Color.ToHex(WebDE.GameObjects.Helpah.Round$$Double(blueDub));
            var greenDub=this.green / 16;
            returnString += WebDE.Color.ToHex(WebDE.GameObjects.Helpah.Round$$Double(greenDub));
            greenDub = this.green % 16;
            returnString += WebDE.Color.ToHex(WebDE.GameObjects.Helpah.Round$$Double(greenDub));
            return returnString;
        },
        Match:function(colorTomatch)
        {
            if(this.red != colorTomatch.red || this.green != colorTomatch.green || this.blue != colorTomatch.blue)
            {
                return false;
            }
            return true;
        },
        IsOpposite:function(otherColor)
        {
            return true;
        }
    }
};
JsTypes.push(WebDE$Color);
var WebDE$Circle=
{
    fullname:"WebDE.Circle",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(left,top,radius)
        {
            this.x = 0;
            this.y = 0;
            this.radius = 0;
            System.Object.ctor.call(this);
            this.x = left;
            this.y = top;
            this.radius = radius;
        },
        Contains:function(point)
        {
            return false;
        }
    }
};
JsTypes.push(WebDE$Circle);
var WebDE$Dimension=
{
    fullname:"WebDE.Dimension",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor$$Double$$Double:function(myWidth,myHeight)
        {
            this.width = 0;
            this.height = 0;
            this.depth = 0;
            System.Object.ctor.call(this);
            this.width = myWidth;
            this.height = myHeight;
        },
        ctor$$Double$$Double$$Double:function(myWidth,myHeight,myDepth)
        {
            this.width = 0;
            this.height = 0;
            this.depth = 0;
            System.Object.ctor.call(this);
            this.width = myWidth;
            this.height = myHeight;
            this.depth = myDepth;
        }
    }
};
JsTypes.push(WebDE$Dimension);
var WebDE$Point=
{
    fullname:"WebDE.Point",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(theX,theY)
        {
            this.x = 0;
            this.y = 0;
            System.Object.ctor.call(this);
            this.x = theX;
            this.y = theY;
        },
        Distance:function(point2)
        {
            return System.Math.Sqrt(System.Math.Pow(point2.x - this.x,2) + System.Math.Pow(point2.y - this.y,2));
        },
        ToTuple:function()
        {
            var returnVal=new System.Tuple$2.ctor(System.Double.ctor,System.Double.ctor,this.x,this.y);
            return returnVal;
        }
    }
};
JsTypes.push(WebDE$Point);
var WebDE$Rectangle=
{
    fullname:"WebDE.Rectangle",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(left,top,width,height)
        {
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.height = 0;
            System.Object.ctor.call(this);
            this.x = left;
            this.y = top;
            this.width = width;
            this.height = height;
        },
        Right:function()
        {
            return this.x + this.width;
        },
        Bottom:function()
        {
            return this.y + this.height;
        },
        Contains:function(point)
        {
            if(point.x < this.x || point.y < this.y || point.x > this.width || point.y > this.height)
            {
                return false;
            }
            return true;
        }
    }
};
JsTypes.push(WebDE$Rectangle);
var WebDE$Vector=
{
    fullname:"WebDE.Vector",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        Distance:function(vector1,vector2)
        {
            return System.Math.Abs$$Double(vector2.y - vector1.y) + System.Math.Abs$$Double(vector2.x - vector1.x);
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(xMagnitude,yMagnitude)
        {
            this.x = 0;
            this.y = 0;
            System.Object.ctor.call(this);
            this.x = xMagnitude;
            this.y = yMagnitude;
        }
    }
};
JsTypes.push(WebDE$Vector);
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$GUI$GuiElement=
{
    fullname:"WebDE.GUI.GuiElement",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.GUI.GuiElement.lastid = 0;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(owningLayer,elementText)
        {
            this.id = null;
            this.text = null;
            this.sprIcon = null;
            this.position = new WebDE.Point.ctor(0,0);
            this.size = null;
            this.parentLayer = null;
            this.selected = false;
            this.customValue = "";
            this.styleClasses = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.customStyles = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor,System.String.ctor);
            this.elementFunctions = new System.Collections.Generic.Dictionary$2.ctor(WebDE.GUI.GUIFunction.ctor,System.Action$1.ctor);
            System.Object.ctor.call(this);
            WebDE.GUI.GuiElement.lastid++;
            this.id = "GuiElement_" + WebDE.GUI.GuiElement.lastid;
            this.parentLayer = owningLayer;
            this.text = elementText;
        },
        GetId:function()
        {
            return this.id;
        },
        GetParentLayer:function()
        {
            return this.parentLayer;
        },
        SetGUIFunction:function(func,newEvent)
        {
            this.elementFunctions.set_Item$$TKey(func,newEvent);
        },
        DoGUIFunction:function(func)
        {
            if(this.elementFunctions.get_Item$$TKey(func) != null)
            {
                var eventToTrigger=WebDE.GUI.GuiEvent.FromGuiElement(this);
                this.elementFunctions.get_Item$$TKey(func)(eventToTrigger);
            }
            else
            {
                var $it11=this.elementFunctions.get_Keys().GetEnumerator();
                while($it11.MoveNext())
                {
                    var gf=$it11.get_Current();
                }
            }
        },
        AttachToGameEntity:function(entToAttach)
        {
        },
        GetPosition:function()
        {
            return this.position;
        },
        SetPosition:function(xPos,yPos)
        {
            this.position.x = xPos;
            this.position.y = yPos;
            this.SetNeedsUpdate();
        },
        SetSize:function(newWidth,newHeight)
        {
            this.size.width = newWidth;
            this.size.height = newHeight;
            this.SetNeedsUpdate();
        },
        GetText:function()
        {
            return this.text;
        },
        SetText:function(newText)
        {
            this.text = newText;
            this.SetNeedsUpdate();
        },
        Hide:function()
        {
            this.SetNeedsUpdate();
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        Show:function()
        {
            this.SetNeedsUpdate();
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        Minimize:function()
        {
            this.SetNeedsUpdate();
            throw $CreateException(new System.NotImplementedException.ctor(),new Error());
        },
        GetSprite:function()
        {
            return this.sprIcon;
        },
        SetSprite:function(newSprite)
        {
            this.sprIcon = newSprite;
            this.SetNeedsUpdate();
        },
        GetCustomValue:function()
        {
            return this.customValue;
        },
        SetCustomValue:function(newVal)
        {
            this.customValue = newVal;
        },
        Select:function(toApply)
        {
            if(toApply == true)
            {
                this.selected = true;
            }
            else
            {
                this.selected = false;
            }
            this.SetNeedsUpdate();
        },
        Selected:function()
        {
            return this.selected;
        },
        GetSize:function()
        {
            return this.size;
        },
        SetNeedsUpdate:function()
        {
            WebDE.Rendering.DOM_Renderer.GetRenderer().SetNeedsUpdate$$GuiElement(this);
        },
        AddStyle:function(styleToAdd)
        {
            if(!this.styleClasses.Contains(styleToAdd))
            {
                this.styleClasses.Add(styleToAdd);
            }
        },
        RemoveStyle:function(styleToAdd)
        {
            if(this.styleClasses.Contains(styleToAdd))
            {
                this.styleClasses.Remove(styleToAdd);
            }
        },
        GetStyles:function()
        {
            return this.styleClasses;
        },
        GetStyle:function(styleName)
        {
            return this.customStyles.get_Item$$TKey(styleName);
        },
        SetStyle:function(styleName,styleValue)
        {
            this.customStyles.set_Item$$TKey(styleName,styleValue);
            this.SetNeedsUpdate();
        }
    }
};
JsTypes.push(WebDE$GUI$GuiElement);
var WebDE$GUI$GuiEvent=
{
    fullname:"WebDE.GUI.GuiEvent",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        FromClickData:function(gLayer,clickPos)
        {
            var returnEvent=new WebDE.GUI.GuiEvent.ctor(System.Int32.Parse$$String(clickPos.x.toString()),System.Int32.Parse$$String(clickPos.y.toString()));
            returnEvent.clickedElement = gLayer.GetElementAt(returnEvent.eventPos.x,returnEvent.eventPos.y);
            returnEvent.clickedEntities = gLayer.GetEntitiesAt(returnEvent.eventPos.x,returnEvent.eventPos.y);
            returnEvent.clickedTiles = gLayer.GetTilesAt(returnEvent.eventPos.x,returnEvent.eventPos.y);
            return returnEvent;
        },
        FromGuiElement:function(sender)
        {
            var returnEvent=new WebDE.GUI.GuiEvent.ctor(Cast(sender.GetPosition().x,System.Int32.ctor),Cast(sender.GetPosition().y,System.Int32.ctor));
            returnEvent.clickedElement = sender;
            returnEvent.clickedTiles = sender.GetParentLayer().GetTilesAt(returnEvent.eventPixelPos.x,returnEvent.eventPixelPos.y);
            return returnEvent;
        },
        FromPartialData:function(sendingTile,sendingGameEntity,sendingElement,triggeringPosition,triggeringScreenPosition)
        {
            var eventToReturn=new WebDE.GUI.GuiEvent.ctor(0,0);
            if(sendingTile != null)
            {
                eventToReturn.clickedTiles.Add(sendingTile);
            }
            if(sendingGameEntity != null)
            {
                eventToReturn.clickedEntities.Add(sendingGameEntity);
            }
            if(sendingElement != null)
            {
                eventToReturn.clickedElement = sendingElement;
            }
            if(triggeringPosition != null)
            {
                eventToReturn.eventPos = triggeringPosition;
            }
            if(triggeringScreenPosition != null)
            {
                eventToReturn.eventPixelPos = triggeringScreenPosition;
            }
            if(eventToReturn.eventPos == null)
            {
            }
            return eventToReturn;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(xPos,yPos)
        {
            this.clickedTiles = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.Tile.ctor);
            this.clickedEntities = new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            this.topGameEntity = null;
            this.eventPos = null;
            this.eventPixelPos = null;
            this.clickedElement = null;
            System.Object.ctor.call(this);
            var TileSize=WebDE.GameObjects.Stage.CurrentStage.GetTileSize();
            this.eventPixelPos = new WebDE.Point.ctor(xPos,yPos);
            this.eventPos = new WebDE.Point.ctor(this.eventPixelPos.x / TileSize.get_Item1(),this.eventPixelPos.y / TileSize.get_Item2());
        }
    }
};
JsTypes.push(WebDE$GUI$GuiEvent);
var WebDE$GUI$GUIFunction=
{
    fullname:"WebDE.GUI.GUIFunction",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.GUI.GUIFunction.guiFunctions = new System.Collections.Generic.List$1.ctor(WebDE.GUI.GUIFunction.ctor);
            WebDE.GUI.GUIFunction.defaultFunction = null;
        },
        GetByName:function(functionName)
        {
            var $it12=WebDE.GUI.GUIFunction.guiFunctions.GetEnumerator();
            while($it12.MoveNext())
            {
                var gf=$it12.get_Current();
                if(gf.GetName() == functionName)
                {
                    return gf;
                }
            }
            return null;
        },
        GetDefaultFunction:function()
        {
            return WebDE.GUI.GUIFunction.defaultFunction;
        },
        SetDefaultFunction:function(newFunc)
        {
            WebDE.GUI.GUIFunction.defaultFunction = newFunc;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor$$String$$InputDevice$$String$$ButtonCommand:function(name,bindingDevice,defaultButtonName,buttonCommand)
        {
            this.eventName = "";
            this.firingDelay = 250;
            this.lastFire = 0;
            this.boundButtons = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            System.Object.ctor.call(this);
            this.eventName = name;
            bindingDevice.Bind$$String$$Int32$$ButtonCommand$$GUIFunction(defaultButtonName,0,buttonCommand,this);
            if(WebDE.GUI.GUIFunction.defaultFunction == null)
            {
                WebDE.GUI.GUIFunction.defaultFunction = this;
            }
            WebDE.GUI.GUIFunction.guiFunctions.Add(this);
        },
        ctor$$String$$InputDevice$$String:function(name,bindingDevice,defaultButtonName)
        {
            this.eventName = "";
            this.firingDelay = 250;
            this.lastFire = 0;
            this.boundButtons = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            System.Object.ctor.call(this);
            this.eventName = name;
            bindingDevice.Bind$$String$$Int32$$ButtonCommand$$GUIFunction(defaultButtonName,0,0,this);
            if(WebDE.GUI.GUIFunction.defaultFunction == null)
            {
                WebDE.GUI.GUIFunction.defaultFunction = this;
            }
            WebDE.GUI.GUIFunction.guiFunctions.Add(this);
        },
        GetName:function()
        {
            return this.eventName;
        }
    }
};
JsTypes.push(WebDE$GUI$GUIFunction);
var WebDE$GUI$GuiLayer=
{
    fullname:"WebDE.GUI.GuiLayer",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.GUI.GuiLayer.lastid = 0;
            WebDE.GUI.GuiLayer.allTheLayers = new System.Collections.Generic.List$1.ctor(WebDE.GUI.GuiLayer.ctor);
            WebDE.GUI.GuiLayer.lastActiveLayer = null;
            WebDE.GUI.GuiLayer.defaultLayer = null;
        },
        GetLayerByName:function(layerName)
        {
            var $it19=WebDE.GUI.GuiLayer.allTheLayers.GetEnumerator();
            while($it19.MoveNext())
            {
                var currentLayer=$it19.get_Current();
                if(currentLayer.GetName() == layerName)
                {
                    return currentLayer;
                }
            }
            return null;
        },
        GetActiveLayers:function()
        {
            var resultList=new System.Collections.Generic.List$1.ctor(WebDE.GUI.GuiLayer.ctor);
            var $it20=WebDE.GUI.GuiLayer.allTheLayers.GetEnumerator();
            while($it20.MoveNext())
            {
                var layer=$it20.get_Current();
                if(layer.IsActive())
                {
                    resultList.Add(layer);
                }
            }
            return resultList;
        },
        AsCollisionMap:function(sourceStage)
        {
            var collisionLayer=WebDE.Rendering.View.GetMainView().AddLayer("CollisionLayer",WebDE.Rendering.DOM_Renderer.GetRenderer().BoardArea());
            var tileSize=WebDE.GameObjects.Stage.CurrentStage.GetTileSize();
            var $it21=sourceStage.GetVisibleTiles(collisionLayer.GetAttachedView()).GetEnumerator();
            while($it21.MoveNext())
            {
                var tile=$it21.get_Current();
                var gelm=collisionLayer.AddGUIElement("");
                gelm.SetPosition(WebDE.GameObjects.Helpah.Round$$Double(tile.GetPosition().x * tileSize.get_Item1()),WebDE.GameObjects.Helpah.Round$$Double(tile.GetPosition().y * tileSize.get_Item2()));
                gelm.AddStyle("collisionBlock");
                if(tile.GetBuildable())
                {
                    gelm.AddStyle("buildable");
                }
            }
            return collisionLayer;
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(layerName,attachingView,rectLayerPos)
        {
            this.guiElements = new System.Collections.Generic.List$1.ctor(WebDE.GUI.GuiElement.ctor);
            this.selectedElements = new System.Collections.Generic.List$1.ctor(WebDE.GUI.GuiElement.ctor);
            this.active = true;
            this.attachedView = null;
            this.area = new WebDE.Rectangle.ctor(0,0,0,0);
            this.isGameLayer = false;
            this.focusedElement = null;
            this.visible = true;
            this.name = null;
            this.id = null;
            this.followingCursor = false;
            this.layerFunctions = new System.Collections.Generic.Dictionary$2.ctor(WebDE.GUI.GUIFunction.ctor,System.Action$1.ctor);
            System.Object.ctor.call(this);
            WebDE.GUI.GuiLayer.lastid++;
            this.id = "GUILayer" + WebDE.GUI.GuiLayer.lastid;
            this.name = layerName;
            this.attachedView = attachingView;
            this.SetArea(rectLayerPos);
            WebDE.GUI.GuiLayer.allTheLayers.Add(this);
        },
        GetId:function()
        {
            return this.id;
        },
        GetName:function()
        {
            return this.name;
        },
        SetName:function(newName)
        {
            this.name = newName;
        },
        Activate:function()
        {
            this.active = true;
        },
        Deactivate:function()
        {
            this.active = false;
            WebDE.GUI.GuiLayer.lastActiveLayer = this;
        },
        IsActive:function()
        {
            return this.active;
        },
        GetArea:function()
        {
            return this.area;
        },
        GetPosition:function()
        {
            var returnVal=new WebDE.Point.ctor(this.area.x,this.area.y);
            return returnVal;
        },
        SetPosition:function(newX,newY)
        {
            if(newX < 0)
            {
                newX = this.GetAttachedView().GetSize().width - System.Math.Abs$$Double(newX) - this.GetSize().width;
            }
            if(newY < 0)
            {
                newY = this.GetAttachedView().GetSize().height - System.Math.Abs$$Double(newY) - this.GetSize().height;
            }
            this.area.x = newX;
            this.area.y = newY;
        },
        GetSize:function()
        {
            return new WebDE.Dimension.ctor$$Double$$Double(this.area.width,this.area.height);
        },
        SetSize:function(newWidth,newHeight)
        {
            this.area.width = newWidth;
            this.area.height = newHeight;
        },
        SetArea:function(newArea)
        {
            this.SetSize(newArea.width,newArea.height);
            this.SetPosition(newArea.x,newArea.y);
        },
        AddGUIElement:function(text)
        {
            var newElement=new WebDE.GUI.GuiElement.ctor(this,text);
            this.guiElements.Add(newElement);
            if(this.focusedElement == null)
            {
                this.focusedElement = newElement;
            }
            return newElement;
        },
        GetGuiElements:function()
        {
            return this.guiElements;
        },
        PreviousItem:function()
        {
            var focusedInex=this.guiElements.IndexOf$$T(this.focusedElement);
            if(focusedInex <= 0)
            {
                focusedInex = this.guiElements.get_Count() - 1;
            }
            this.focusedElement = this.guiElements.get_Item$$Int32(focusedInex - 1);
        },
        NextItem:function()
        {
            var focusedInex=this.guiElements.IndexOf$$T(this.focusedElement);
            if(focusedInex >= this.guiElements.get_Count() - 1)
            {
                focusedInex = -1;
            }
            this.focusedElement = this.guiElements.get_Item$$Int32(focusedInex + 1);
        },
        GetSelectedItems:function()
        {
            var elementList=this.GetGuiElements();
            var $it13=elementList.GetEnumerator();
            while($it13.MoveNext())
            {
                var gelm=$it13.get_Current();
                if(gelm.Selected() == false)
                {
                    elementList.Remove(gelm);
                }
            }
            return elementList;
        },
        SelectItem:function(itemName,itemIndex)
        {
            var $it14=this.GetSelectedItems().GetEnumerator();
            while($it14.MoveNext())
            {
                var gelm=$it14.get_Current();
                gelm.Select(false);
            }
            var elementToSelect=null;
            if(itemName != "" && itemName != null)
            {
                var elementList=this.GetGuiElements();
                var $it15=elementList.GetEnumerator();
                while($it15.MoveNext())
                {
                    var gelm=$it15.get_Current();
                    if(gelm.GetText() == itemName)
                    {
                        elementToSelect = gelm;
                        break;
                    }
                }
            }
            else
            {
                elementToSelect = this.GetGuiElements().get_Item$$Int32(itemIndex);
            }
            if(elementToSelect != null)
            {
                elementToSelect.Select(true);
            }
        },
        GetAttachedView:function()
        {
            return this.attachedView;
        },
        GetElementAt:function(xpos,ypos)
        {
            if(xpos > this.GetPosition().x)
            {
                xpos -= this.GetPosition().x;
                ypos -= this.GetPosition().y;
            }
            if(this.IsGameLayer() == true)
            {
                var tileList=this.GetAttachedView().GetAttachedStage().GetVisibleTiles(this.GetAttachedView());
            }
            else
            {
                var $it16=this.guiElements.GetEnumerator();
                while($it16.MoveNext())
                {
                    var gelm=$it16.get_Current();
                    if((gelm.GetPosition().x <= xpos && gelm.GetPosition().x + gelm.GetSize().width >= xpos) && (gelm.GetPosition().y <= ypos && gelm.GetPosition().y + gelm.GetSize().height >= ypos))
                    {
                        return gelm;
                    }
                }
            }
            return null;
        },
        GetEntitiesAt:function(xpos,ypos)
        {
            var returnList=new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.GameEntity.ctor);
            var GameEntityList=this.GetAttachedView().GetAttachedStage().GetVisibleEntities(this.GetAttachedView());
            var $it17=GameEntityList.GetEnumerator();
            while($it17.MoveNext())
            {
                var ent=$it17.get_Current();
                if((ent.GetPosition().x <= xpos && ent.GetPosition().x + ent.GetSize().width >= xpos) && (ent.GetPosition().y <= ypos && ent.GetPosition().y + ent.GetSize().height >= ypos))
                {
                    returnList.Add(ent);
                }
            }
            return returnList;
        },
        GetTilesAt:function(xpos,ypos)
        {
            var tileSize=WebDE.GameObjects.Stage.CurrentStage.GetTileSize();
            xpos = xpos / tileSize.get_Item1();
            ypos = ypos / tileSize.get_Item2();
            var returnList=new System.Collections.Generic.List$1.ctor(WebDE.GameObjects.Tile.ctor);
            var tileList=this.GetAttachedView().GetAttachedStage().GetVisibleTiles(this.GetAttachedView());
            xpos = WebDE.GameObjects.Helpah.Round$$Double(xpos);
            ypos = WebDE.GameObjects.Helpah.Round$$Double(ypos);
            var $it18=tileList.GetEnumerator();
            while($it18.MoveNext())
            {
                var ent=$it18.get_Current();
                if(ent.GetPosition().x == xpos && ent.GetPosition().y == ypos)
                {
                    var til=Cast(ent,WebDE.GameObjects.Tile.ctor);
                    returnList.Add(til);
                }
            }
            return returnList;
        },
        SetGameLayer:function(newTruth_nullable)
        {
            if(newTruth_nullable == null)
            {
                this.isGameLayer = !this.isGameLayer;
            }
            else
            {
                this.isGameLayer = newTruth_nullable;
            }
        },
        IsGameLayer:function()
        {
            return this.isGameLayer;
        },
        FollowingCursor:function()
        {
            return this.followingCursor;
        },
        FollowCursor:function(toFollow)
        {
            this.followingCursor = toFollow;
        },
        GUI_Event:function(buttonFunction,eventPos)
        {
            this.DoGUIFunction(buttonFunction,eventPos);
            var elementToNotify;
            if(eventPos == null)
            {
                if(this.focusedElement == null)
                {
                    return;
                }
                elementToNotify = this.focusedElement;
            }
            else
            {
                elementToNotify = this.GetElementAt(eventPos.x,eventPos.y);
            }
            if(elementToNotify == null)
            {
                return;
            }
            elementToNotify.DoGUIFunction(buttonFunction);
        },
        SetGUIFunction:function(func,newEvent)
        {
            this.layerFunctions.set_Item$$TKey(func,newEvent);
        },
        DoGUIFunction:function(func,eventPos)
        {
            eventPos.x -= this.GetPosition().x;
            eventPos.y -= this.GetPosition().y;
            if(this.layerFunctions.get_Item$$TKey(func) != null)
            {
                var eventToTrigger=WebDE.GUI.GuiEvent.FromClickData(this,eventPos);
                this.layerFunctions.get_Item$$TKey(func)(eventToTrigger);
            }
            else
            {
            }
        },
        Show:function()
        {
            this.visible = true;
            this.SetNeedsUpdate();
        },
        Hide:function()
        {
            this.visible = false;
            this.SetNeedsUpdate();
        },
        Visible:function()
        {
            return this.visible;
        },
        SetNeedsUpdate:function()
        {
            WebDE.Rendering.DOM_Renderer.GetRenderer().SetNeedsUpdate$$GuiLayer(this);
        }
    }
};
JsTypes.push(WebDE$GUI$GuiLayer);
var WebDE$GUI$Hint=
{
    fullname:"WebDE.GUI.Hint",
    baseTypeName:"WebDE.GUI.GuiElement",
    staticDefinition:
    {
        cctor:function()
        {
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(owningLayer,elementText)
        {
            this.title = null;
            this.hasAction = false;
            WebDE.GUI.GuiElement.ctor.call(this,owningLayer,elementText);
        }
    }
};
JsTypes.push(WebDE$GUI$Hint);
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$InputManager$Input=
{
    fullname:"WebDE.InputManager.Input",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.InputManager.Input.disableAdvancedMouseInput = false;
            WebDE.InputManager.Input.onscreenKeyboard = false;
        },
        Init:function()
        {
            WebDE.InputManager.Input.Bind_Input_DOM();
            WebDE.InputManager.InputDevice.InitializeDevices();
        },
        LoadConfig:function(configKeyVals)
        {
        },
        ProcessMouseButtonEvent:function(buttonId,clickX,clickY,buttonCommand)
        {
            var buttonFunction=WebDE.InputManager.InputDevice.Mouse.GetFunctionFromButton$$String$$Int32$$ButtonCommand("",buttonId,buttonCommand);
            var $it22=WebDE.Rendering.View.GetActiveViews().GetEnumerator();
            while($it22.MoveNext())
            {
                var view=$it22.get_Current();
                if(clickX > view.GetArea().Right() || clickX < view.GetArea().x || clickY > view.GetArea().Bottom() || clickY < view.GetArea().y)
                {
                    continue;
                }
                view.GUI_Event(buttonFunction,clickX,clickY);
            }
        },
        ProcessKeyboardEvent:function(buttonId,buttonCommand)
        {
            var buttonFunction=WebDE.InputManager.InputDevice.Keyboard.GetFunctionFromButton$$String$$Int32$$ButtonCommand("",buttonId,buttonCommand);
            var $it23=WebDE.GUI.GuiLayer.GetActiveLayers().GetEnumerator();
            while($it23.MoveNext())
            {
                var activeLayer=$it23.get_Current();
                var actionLocation=new WebDE.Point.ctor(0,0);
                activeLayer.GUI_Event(buttonFunction,actionLocation);
            }
        },
        Bind_Input_DOM:function()
        {
            WebDE.Debug.log("Binding input to dom");
            $(document).bind("mousedown",WebDE.InputManager.Input.jQuery_handleClick);
            $(document).bind("mouseup",WebDE.InputManager.Input.jQuery_handleMouseUp);
            $(document).bind("keydown",WebDE.InputManager.Input.jQuery_handleKeyboardDown);
            $(document).bind("mousemove",WebDE.InputManager.Input.jQuery_handleMouseMove);
        },
        jQuery_handleClick:function(eventData)
        {
            var clickX=eventData.clientX - WebDE.GameObjects.Helpah.Parse(document.getElementById("gameWrapper").style.left);
            var clickY=eventData.clientY - WebDE.GameObjects.Helpah.Parse(document.getElementById("gameWrapper").style.top);
            WebDE.InputManager.Input.ProcessMouseButtonEvent(eventData.which,clickX,clickY,0);
        },
        jQuery_handleMouseUp:function(eventData)
        {
            var clickX=eventData.clientX - WebDE.GameObjects.Helpah.Parse(document.getElementById("gameWrapper").style.left);
            var clickY=eventData.clientY - WebDE.GameObjects.Helpah.Parse(document.getElementById("gameWrapper").style.top);
            WebDE.InputManager.Input.ProcessMouseButtonEvent(eventData.which,clickX,clickY,1);
        },
        jQuery_handleKeyboardDown:function(eventData)
        {
            WebDE.InputManager.Input.ProcessKeyboardEvent(eventData.which,0);
        },
        jQuery_handleMouseMove:function(eventData)
        {
            WebDE.InputManager.InputDevice.Mouse.SetAxisPosition(0,eventData.clientX);
            WebDE.InputManager.InputDevice.Mouse.SetAxisPosition(1,eventData.clientY);
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WebDE$InputManager$Input);
var WebDE$InputManager$InputDevice=
{
    fullname:"WebDE.InputManager.InputDevice",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.InputManager.InputDevice.Mouse = null;
            WebDE.InputManager.InputDevice.Keyboard = null;
        },
        InitializeDevices:function()
        {
            WebDE.InputManager.InputDevice.Mouse = new WebDE.InputManager.InputDevice.ctor("mouse");
            WebDE.InputManager.InputDevice.Keyboard = new WebDE.InputManager.InputDevice.ctor("keyboard");
            WebDE.InputManager.InputDevice.Mouse.SetButtonName(1,"mouse0");
            WebDE.InputManager.InputDevice.Keyboard.SetButtonName(187,"Plus");
            WebDE.InputManager.InputDevice.Keyboard.SetButtonName(107,"NumPlus");
        }
    },
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(name)
        {
            this.deviceName = "";
            this.buttonNames = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor,System.String.ctor);
            this.buttonFunctions = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor,System.Collections.Generic.Dictionary$2.ctor);
            this.axisPositions = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor,System.Double.ctor);
            System.Object.ctor.call(this);
            this.deviceName = name;
        },
        SetButtonName:function(buttonId,buttonName)
        {
            this.buttonNames.set_Item$$TKey(buttonId,buttonName);
        },
        GetButtonName:function(buttonId)
        {
            return this.buttonNames.get_Item$$TKey(buttonId);
        },
        GetButtonId:function(buttonName)
        {
            var $it24=this.buttonNames.get_Keys().GetEnumerator();
            while($it24.MoveNext())
            {
                var buttonKey=$it24.get_Current();
                if(this.buttonNames.get_Item$$TKey(buttonKey) == buttonName)
                {
                    return buttonKey;
                }
            }
            return -1;
        },
        Bind$$String$$Int32$$ButtonCommand$$GUIFunction:function(buttonName,buttonId,buttonCommand,buttonFunction)
        {
            if(buttonName != "" && buttonName != null)
            {
                buttonId = this.GetButtonId(buttonName);
            }
            if(this.buttonFunctions.get_Item$$TKey(buttonId) == null)
            {
                this.buttonFunctions.set_Item$$TKey(buttonId,new System.Collections.Generic.Dictionary$2.ctor(WebDE.GUI.ButtonCommand.ctor,WebDE.GUI.GUIFunction.ctor));
            }
            this.buttonFunctions.get_Item$$TKey(buttonId).set_Item$$TKey(buttonCommand,buttonFunction);
        },
        Bind$$String$$Int32$$GUIFunction:function(buttonName,buttonId,buttonFunction)
        {
            this.Bind$$String$$Int32$$ButtonCommand$$GUIFunction(buttonName,buttonId,0,buttonFunction);
        },
        UnBind:function(buttonName,buttonId)
        {
        },
        GetFunctionFromButton$$String$$Int32$$ButtonCommand:function(buttonName,buttonId,buttonCommand)
        {
            if(buttonName != "" && buttonName != null)
            {
                buttonId = this.GetButtonId(buttonName);
            }
            if(this.buttonFunctions.get_Item$$TKey(buttonId) == null)
            {
                return null;
            }
            return this.buttonFunctions.get_Item$$TKey(buttonId).get_Item$$TKey(buttonCommand);
        },
        GetFunctionFromButton$$String$$Int32:function(buttonName,buttonId)
        {
            return this.GetFunctionFromButton$$String$$Int32$$ButtonCommand(buttonName,buttonId,0);
        },
        GetAxisPosition:function(axis)
        {
            return this.axisPositions.get_Item$$TKey(axis);
        },
        SetAxisPosition:function(axis,position)
        {
            this.axisPositions.set_Item$$TKey(axis,position);
        }
    }
};
JsTypes.push(WebDE$InputManager$InputDevice);
/*Generated by SharpKit 5 v4.28.9000*/
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$Timekeeper$Clock=
{
    fullname:"WebDE.Timekeeper.Clock",
    baseTypeName:"System.Object",
    staticDefinition:
    {
        cctor:function()
        {
            WebDE.Timekeeper.Clock.MaxFrameRate = 30;
            WebDE.Timekeeper.Clock.IDLength = 32;
            WebDE.Timekeeper.Clock.calculationList = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor,WebDE.Timekeeper.Execution.ctor);
            WebDE.Timekeeper.Clock.renderList = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor,WebDE.Timekeeper.Execution.ctor);
            WebDE.Timekeeper.Clock.intervals = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor,WebDE.Timekeeper.TimedExecution.ctor);
            WebDE.Timekeeper.Clock.timeouts = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor,WebDE.Timekeeper.TimedExecution.ctor);
        },
        Start:function()
        {
            window.setTimeout(WebDE.Timekeeper.Clock.loop,0);
        },
        AddCalculation:function(context)
        {
            var id=WebDE.Timekeeper.Clock.randomId(WebDE.Timekeeper.Clock.IDLength);
            WebDE.Timekeeper.Clock.calculationList.set_Item$$TKey(id,new WebDE.Timekeeper.Execution.ctor(context));
            return id;
        },
        AddRender:function(context)
        {
            var id=WebDE.Timekeeper.Clock.randomId(WebDE.Timekeeper.Clock.IDLength);
            WebDE.Timekeeper.Clock.renderList.set_Item$$TKey(id,new WebDE.Timekeeper.Execution.ctor(context));
            return id;
        },
        RemoveCalculation:function(id)
        {
            if(WebDE.Timekeeper.Clock.calculationList.ContainsKey(id))
            {
                WebDE.Timekeeper.Clock.calculationList.Remove(id);
            }
        },
        RemoveRender:function(id)
        {
            if(WebDE.Timekeeper.Clock.renderList.ContainsKey(id))
            {
                WebDE.Timekeeper.Clock.renderList.Remove(id);
            }
        },
        delayCalculation:function(id,delaySeconds)
        {
            if(WebDE.Timekeeper.Clock.calculationList.ContainsKey(id))
            {
                WebDE.Timekeeper.Clock.calculationList.get_Item$$TKey(id).Delay(delaySeconds,window);
            }
        },
        delayRender:function(id,delaySeconds)
        {
            if(WebDE.Timekeeper.Clock.renderList.ContainsKey(id))
            {
                WebDE.Timekeeper.Clock.renderList.get_Item$$TKey(id).Delay(delaySeconds,window);
            }
        },
        TimedExecute:function(execution,seconds)
        {
            var id=WebDE.Timekeeper.Clock.randomId(WebDE.Timekeeper.Clock.IDLength);
            var timedExecution=new WebDE.Timekeeper.TimedExecution.ctor(execution);
            var jsID=window.setTimeout($CreateDelegate(timedExecution,timedExecution.Execute),seconds * 1000);
            timedExecution.SetTimerID(jsID);
            WebDE.Timekeeper.Clock.timeouts.set_Item$$TKey(id,timedExecution);
            return id;
        },
        IntervalExecute:function(execution,seconds)
        {
            var id=WebDE.Timekeeper.Clock.randomId(WebDE.Timekeeper.Clock.IDLength);
            var timedExecution=new WebDE.Timekeeper.TimedExecution.ctor(execution);
            var jsID=window.setInterval($CreateDelegate(timedExecution,timedExecution.Execute),System.Math.Round$$Double(seconds * 1000));
            timedExecution.SetTimerID(jsID);
            WebDE.Timekeeper.Clock.timeouts.set_Item$$TKey(id,timedExecution);
            return id;
        },
        CancelIntervalExecute:function(id)
        {
            if(WebDE.Timekeeper.Clock.intervals.ContainsKey(id))
            {
                window.clearInterval(WebDE.Timekeeper.Clock.intervals.get_Item$$TKey(id).GetTimerID());
                WebDE.Timekeeper.Clock.intervals.Remove(id);
            }
        },
        loop:function()
        {
            var start=System.DateTime.get_Now();
            var $it1=WebDE.Timekeeper.Clock.calculationList.GetEnumerator();
            while($it1.MoveNext())
            {
                var exec=$it1.get_Current();
                if(!exec.get_Value().IsDelayed())
                {
                    exec.get_Value().Execute();
                }
            }
            var $it2=WebDE.Timekeeper.Clock.renderList.GetEnumerator();
            while($it2.MoveNext())
            {
                var exec=$it2.get_Current();
                if(!exec.get_Value().IsDelayed())
                {
                    exec.get_Value().Execute();
                }
            }
            var frameInterval=(1 / WebDE.Timekeeper.Clock.MaxFrameRate) * 1000;
            var end=System.DateTime.get_Now();
            var frameTime=end.Subtract$$DateTime(start).get_Milliseconds();
            if(frameTime > frameInterval)
            {
                window.setTimeout(WebDE.Timekeeper.Clock.loop,0);
            }
            else
            {
                window.setTimeout(WebDE.Timekeeper.Clock.loop,Cast(frameInterval,System.Int32.ctor) - frameTime);
            }
        },
        randomId:function(length)
        {
            var id="";
            for(var i=0;i < length;i++)
            {
                var alphonse=Math.floor(Math.random() * 10);
                id += alphonse.toString();
            }
            return id;
        }
    },
    assemblyName:"WebDE.Clock",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WebDE$Timekeeper$Clock);
var WebDE$Timekeeper$Execution=
{
    fullname:"WebDE.Timekeeper.Execution",
    baseTypeName:"System.Object",
    assemblyName:"WebDE.Clock",
    Kind:"Class",
    definition:
    {
        ctor:function(func)
        {
            this.context = null;
            this.delayed = false;
            System.Object.ctor.call(this);
            this.context = func;
        },
        Execute:function()
        {
            this.context();
        },
        Delay:function(seconds,window)
        {
            this.delayed = true;
            window.setTimeout($CreateDelegate(this,this.unDelay),seconds * 1000);
        },
        IsDelayed:function()
        {
            return this.delayed;
        },
        unDelay:function()
        {
            this.delayed = false;
        }
    }
};
JsTypes.push(WebDE$Timekeeper$Execution);
var WebDE$Timekeeper$TimedExecution=
{
    fullname:"WebDE.Timekeeper.TimedExecution",
    baseTypeName:"System.Object",
    assemblyName:"WebDE.Clock",
    Kind:"Class",
    definition:
    {
        ctor:function(func)
        {
            this.context = null;
            this.timerID = 0;
            System.Object.ctor.call(this);
            this.context = func;
        },
        Execute:function()
        {
            this.context();
        },
        SetTimerID:function(id)
        {
            this.timerID = id;
        },
        GetTimerID:function()
        {
            return this.timerID;
        }
    }
};
JsTypes.push(WebDE$Timekeeper$TimedExecution);
/*Generated by SharpKit 5 v4.28.9000*/
function $CombineDelegates(del1,del2)
{
    if(del1 == null)
        return del2;
    if(del2 == null)
        return del1;
    var del=$CreateMulticastDelegateFunction();
    del.delegates = [];
    if(del1.isMulticastDelegate)
    {
        for(var i=0;i < del1.delegates.length;i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if(del2.isMulticastDelegate)
    {
        for(var i=0;i < del2.delegates.length;i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};
function $CreateMulticastDelegateFunction()
{
    var del=function()
    {
        var del2=arguments.callee;
        var x=undefined;
        for(var i=0;i < del2.delegates.length;i++)
        {
            var del3=del2.delegates[i];
            x = del3.apply(null,arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    return del;
};
function $RemoveDelegate(delOriginal,delToRemove)
{
    if(delToRemove == null || delOriginal == null)
        return delOriginal;
    if(delOriginal.isMulticastDelegate)
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("Multicast to multicast delegate removal is not implemented yet");
        var del=$CreateMulticastDelegateFunction();
        for(var i=0;i < delOriginal.delegates.length;i++)
        {
            var del2=delOriginal.delegates[i];
            if(del2 != delToRemove)
            {
                if(del.delegates == null)
                    del.delegates = [];
                del.delegates.push(del2);
            }
        }
        if(del.delegates == null)
            return null;
        if(del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if(delToRemove.isMulticastDelegate)
            throw new Error("single to multicast delegate removal is not supported");
        if(delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};
if (typeof($CreateDelegate)=='undefined'){
    if(typeof($iKey)=='undefined') var $iKey = 0;
    if(typeof($pKey)=='undefined') var $pKey = String.fromCharCode(1);
    var $CreateDelegate = function(target, func){
        if (target == null || func == null) 
            return func;
        if(func.target==target && func.func==func)
            return func;
        if (target.$delegateCache == null)
            target.$delegateCache = {};
        if (func.$key == null)
            func.$key = $pKey + String(++$iKey);
        var delegate;
        if(target.$delegateCache!=null)
            delegate = target.$delegateCache[func.$key];
        if (delegate == null){
            delegate = function(){
                return func.apply(target, arguments);
            };
            delegate.func = func;
            delegate.target = target;
            delegate.isDelegate = true;
            if(target.$delegateCache!=null)
                target.$delegateCache[func.$key] = delegate;
        }
        return delegate;
    }
}
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$Net$NetworkClient=
{
    fullname:"WebDE.Net.NetworkClient",
    baseTypeName:"System.Object",
    assemblyName:"WebDE.Net",
    Kind:"Class",
    definition:
    {
        ctor:function(host,port)
        {
            this.socket = null;
            System.Object.ctor.call(this);
            this.set_Port(port);
            this.set_Host(host);
        },
        Port$$:"System.Int32",
        get_Port:function(){return this._Port;},
        set_Port:function(value){this._Port = value;},
        Host$$:"System.String",
        get_Host:function(){return this._Host;},
        set_Host:function(value){this._Host = value;},
        add_OnReceive:function(value)
        {
            this.OnReceive = $CombineDelegates(this.OnReceive,value);
        },
        remove_OnReceive:function(value)
        {
            this.OnReceive = $RemoveDelegate(this.OnReceive,value);
        },
        add_OnConnect:function(value)
        {
            this.OnConnect = $CombineDelegates(this.OnConnect,value);
        },
        remove_OnConnect:function(value)
        {
            this.OnConnect = $RemoveDelegate(this.OnConnect,value);
        },
        add_OnDisconnect:function(value)
        {
            this.OnDisconnect = $CombineDelegates(this.OnDisconnect,value);
        },
        remove_OnDisconnect:function(value)
        {
            this.OnDisconnect = $RemoveDelegate(this.OnDisconnect,value);
        },
        Connect:function()
        {
            this.socket = new WebSocket("ws://" + this.get_Host() + ":" + this.get_Port());
            this.socket.onopen = $CreateDelegate(this,this.onOpen);
            this.socket.onclose = $CreateDelegate(this,this.onClose);
            this.socket.onmessage = $CreateDelegate(this,this.onMessage);
        },
        onOpen:function()
        {
            this.OnConnect();
        },
        onClose:function(evt)
        {
            this.OnDisconnect();
        },
        onMessage:function(evt)
        {
            var message=new Object(JSON.parse(evt.data.toString()));
            this.OnReceive(message);
        },
        onError:function(evt)
        {
        },
        Send:function(obj)
        {
            var json=JSON.stringify(obj);
            this.socket.send(json);
        }
    }
};
JsTypes.push(WebDE$Net$NetworkClient);
if(typeof(JsTypes) == "undefined")
    var JsTypes=[];
var WebDE$Net$GameClient=
{
    fullname:"WebDE.Net.GameClient",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function(host,port)
        {
            this.client = null;
            this.requestQueue = new WebDE.Net.MessageQueue.ctor();
            this.messageInTransit = false;
            this.messageCallBack = null;
            System.Object.ctor.call(this);
            this.client = new WebDE.Net.NetworkClient.ctor(host,port);
            this.client.OnConnect = $CombineDelegates(this.client.OnConnect,$CreateDelegate(this,this.client_OnConnect));
            this.client.OnDisconnect = $CombineDelegates(this.client.OnDisconnect,$CreateDelegate(this,this.client_OnDisconnect));
            this.client.OnReceive = $CombineDelegates(this.client.OnReceive,$CreateDelegate(this,this.client_OnReceive));
            this.client.Connect();
        },
        Host$$:"System.String",
        get_Host:function()
        {
            return this.client.get_Host();
        },
        Port$$:"System.Int32",
        get_Port:function()
        {
            return this.client.get_Port();
        },
        ApiKey$$:"System.String",
        get_ApiKey:function(){return this._ApiKey;},
        set_ApiKey:function(value){this._ApiKey = value;},
        client_OnConnect:function()
        {
        },
        client_OnDisconnect:function()
        {
        },
        client_OnReceive:function(message)
        {
            this.messageInTransit = false;
            var callback=this.messageCallBack;
            if(this.requestQueue.Count > 0)
            {
                var queueItem=Cast(this.requestQueue.Dequeue(),Array);
                this.send(queueItem[0],Cast(queueItem[1],System.Action$1.ctor));
            }
            callback(message);
        },
        send:function(message,callback)
        {
            if(this.messageInTransit)
            {
                var queueItem=[message,callback];
                this.requestQueue.Enqueue(queueItem);
            }
            else
            {
                this.messageInTransit = true;
                this.messageCallBack = callback;
                this.client.Send(message);
            }
        },
        GetApikey:function(username,password,callback)
        {
            var request={action:2,user:username,pass:password};
            this.send(request,callback);
        },
        GetMaps:function(callback)
        {
            var request={action:0,type:0,mapid:0,apikey:this.get_ApiKey()};
            this.send(request,callback);
        },
        GetMap:function(mapid,callback)
        {
            var request={action:0,type:0,mapid:mapid,apikey:this.get_ApiKey()};
            this.send(request,callback);
        },
        GetGroups:function(callback)
        {
            var request={action:3,apikey:this.get_ApiKey()};
            this.send(request,callback);
        }
    }
};
JsTypes.push(WebDE$Net$GameClient);
var WebDE$Net$MessageQueue=
{
    fullname:"WebDE.Net.MessageQueue",
    baseTypeName:"System.Object",
    assemblyName:"WebDE",
    Kind:"Class",
    definition:
    {
        ctor:function()
        {
            this.Count = 0;
            this.queue = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            System.Object.ctor.call(this);
        },
        Enqueue:function(newMember)
        {
            var tQueue=this.queue;
            tQueue.Add(newMember);
            this.queue = tQueue;
            this.Count = this.queue.get_Count();
        },
        Dequeue:function()
        {
            var count=this.queue.get_Count();
            var top=this.queue.get_Item$$Int32(count - 1);
            var tQueue=this.queue;
            tQueue.RemoveAt(count - 1);
            this.queue = tQueue;
            this.Count = this.queue.get_Count();
            return top;
        }
    }
};
JsTypes.push(WebDE$Net$MessageQueue);
